{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xlfiZJGiWR_2"
      },
      "source": [
        "# 🌎 Welcome to the CSE151B Spring 2025 Climate Emulation Competition!\n",
        "\n",
        "Thank you for participating in this exciting challenge focused on building machine learning models to emulate complex climate systems.  \n",
        "This notebook is provided as a **starter template** to help you:\n",
        "\n",
        "- Understand how to load and preprocess the dataset  \n",
        "- Construct a baseline model  \n",
        "- Train and evaluate predictions using a PyTorch Lightning pipeline  \n",
        "- Format your predictions for submission to the leaderboard  \n",
        "\n",
        "You're encouraged to:\n",
        "- Build on this structure or replace it entirely\n",
        "- Try more advanced models and training strategies\n",
        "- Incorporate your own ideas to push the boundaries of what's possible\n",
        "\n",
        "If you're interested in developing within a repository structure and/or use helpful tools like configuration management (based on Hydra) and logging (with Weights & Biases), we recommend checking out the following Github repo. Such a structure can be useful when running multiple experiments and trying various research ideas.\n",
        "\n",
        "👉 [https://github.com/salvaRC/cse151b-spring2025-competition](https://github.com/salvaRC/cse151b-spring2025-competition)\n",
        "\n",
        "Good luck, have fun, and we hope you learn a lot through this process!\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8Ym1h_RcWR_4"
      },
      "source": [
        "### 📦 Install Required Libraries\n",
        "We install the necessary Python packages for data loading, deep learning, and visualization.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o8eBu1hAWR_5",
        "outputId": "897edd94-fefc-4d82-e2aa-14262a0b8996"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/205.4 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m205.4/205.4 kB\u001b[0m \u001b[31m14.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/819.0 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m819.0/819.0 kB\u001b[0m \u001b[31m29.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.4/1.4 MB\u001b[0m \u001b[31m56.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.8/8.8 MB\u001b[0m \u001b[31m100.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m81.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m82.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m46.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m6.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m12.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m7.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m6.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m69.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m962.5/962.5 kB\u001b[0m \u001b[31m42.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m823.1/823.1 kB\u001b[0m \u001b[31m33.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m53.7/53.7 kB\u001b[0m \u001b[31m4.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ],
      "source": [
        "!pip install xarray zarr dask lightning matplotlib wandb cftime einops --quiet\n",
        "#!pip install packaging==23.2 --force-reinstall --quiet\n",
        "\n",
        "import os\n",
        "from datetime import datetime\n",
        "import numpy as np\n",
        "import xarray as xr\n",
        "import dask.array as da\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "import matplotlib.pyplot as plt\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "import lightning.pytorch as pl\n",
        "import torch.nn.functional as F"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6IxdHbulWR_6"
      },
      "source": [
        "### ⚙️ Configuration Setup  \n",
        "Define all model, data, and training hyperparameters in one place for easy control and reproducibility.\n",
        "\n",
        "### 📊 Data Configuration\n",
        "\n",
        "We define the dataset settings used for training and evaluation. This includes:\n",
        "\n",
        "- **`path`**: Path to the `.zarr` dataset containing monthly climate variables from CMIP6 simulations.\n",
        "- **`input_vars`**: Climate forcing variables (e.g., CO₂, CH₄) used as model inputs.\n",
        "- **`output_vars`**: Target variables to predict — surface air temperature (`tas`) and precipitation (`pr`).\n",
        "- **`target_member_id`**: Ensemble member to use from the simulations (each SSP has 3) for target variables.\n",
        "- **`train_ssps`**: SSP scenarios used for training (low to high emissions).\n",
        "- **`test_ssp`**: Scenario held out for evaluation (Must be set to SSP245).\n",
        "- **`test_months`**: Number of months to include in the test split (Must be set to 120).\n",
        "- **`batch_size`** and **`num_workers`**: Data loading parameters for PyTorch training.\n",
        "\n",
        "These settings reflect how the challenge is structured: models must learn from some emission scenarios and generalize to unseen ones.\n",
        "\n",
        "> ⚠️ **Important:** Do **not modify** the following test settings:\n",
        ">\n",
        "> - `test_ssp` must remain **`ssp245`**, which is the held-out evaluation scenario.\n",
        "> - `test_months` must be **`120`**, corresponding to the last 10 years (monthly resolution) of the scenario.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HToiq7mRWR_6",
        "outputId": "a5364bc6-adfb-459a-aab4-e9ef60b690d3"
      },
      "outputs": [
        {
          "ename": "SyntaxError",
          "evalue": "invalid syntax (2972970889.py, line 1)",
          "output_type": "error",
          "traceback": [
            "\u001b[0;36m  Cell \u001b[0;32mIn[4], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    kaggle competitions list\u001b[0m\n\u001b[0m           ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ],
      "source": []
    },
    {
      "cell_type": "raw",
      "metadata": {
        "id": "EoBKPDbNWR_7"
      },
      "source": [
        "#NOTE Change the data directory according to where you have your zarr files stored\n",
        "config = {\n",
        "    \"data\": {\n",
        "        \"path\": \"climate_data/processed_data_cse151b_v2_corrupted_ssp245/processed_data_cse151b_v2_corrupted_ssp245.zarr\",\n",
        "        \"input_vars\": [\"CO2\", \"SO2\", \"CH4\", \"BC\", \"rsdt\"],\n",
        "        \"output_vars\": [\"tas\", \"pr\"],\n",
        "        \"target_member_id\": 0,\n",
        "        \"train_ssps\": [\"ssp126\", \"ssp370\", \"ssp585\"],\n",
        "        \"test_ssp\": \"ssp245\",\n",
        "        \"test_months\": 360,\n",
        "        \"context_months\": 1,\n",
        "        \"batch_size\": 64,\n",
        "        \"num_workers\": 8,\n",
        "    },\n",
        "    \"model\": {\n",
        "        \"type\": \"residual_temporal_cnn\",\n",
        "        \"kernel_size\": 3,\n",
        "        \"init_dim\": 64,\n",
        "        \"depth\": 4,\n",
        "        \"dropout_rate\": 0.1,\n",
        "    },\n",
        "    \"training\": {\n",
        "        \"lr\": 1e-3,\n",
        "    },\n",
        "    \"trainer\": {\n",
        "        \"max_epochs\": 10,\n",
        "        \"accelerator\": \"gpu\",\n",
        "        \"devices\": \"1\",\n",
        "        \"precision\": \"16-mixed\",\n",
        "        \"deterministic\": False,\n",
        "        \"num_sanity_val_steps\": 0,\n",
        "    },\n",
        "    \"seed\": 42,\n",
        "}\n",
        "pl.seed_everything(config[\"seed\"])  # Set seed for reproducibility"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Y8GMmNPlWR_7"
      },
      "outputs": [],
      "source": [
        "config = {\n",
        "    \"data\": {\n",
        "        \"path\": \"climate_data/processed_data_cse151b_v2_corrupted_ssp245/processed_data_cse151b_v2_corrupted_ssp245.zarr\",\n",
        "        \"input_vars\": [\"CO2\", \"SO2\", \"CH4\", \"BC\", \"rsdt\"],\n",
        "        \"output_vars\": [\"tas\", \"pr\"],\n",
        "        \"target_member_id\": 0,\n",
        "        \"train_ssps\": [\"ssp126\", \"ssp370\", \"ssp585\"],\n",
        "        \"test_ssp\": \"ssp245\",\n",
        "        \"test_months\": 360,\n",
        "        \"context_months\": 1,\n",
        "        \"batch_size\": 64,\n",
        "        \"num_workers\": 8,\n",
        "    },\n",
        "    \"model\": {\n",
        "        \"type\": \"unet_temporal\",\n",
        "        \"init_dim\": 64,\n",
        "        \"depth\": 4,\n",
        "        \"dropout_rate\": 0.1,\n",
        "    },\n",
        "    \"training\": {\n",
        "        \"lr\": 1e-3,\n",
        "    },\n",
        "    \"trainer\": {\n",
        "        \"max_epochs\": 30,\n",
        "        \"accelerator\": \"gpu\",\n",
        "        \"devices\": \"1\",\n",
        "        \"precision\": \"16-mixed\",\n",
        "        \"deterministic\": False,\n",
        "        \"num_sanity_val_steps\": 0,\n",
        "    },\n",
        "    \"seed\": 42,\n",
        "}\n",
        "pl.seed_everything(config[\"seed\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BQ41Z_flWR_8"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DKLh8biAWR_8"
      },
      "outputs": [],
      "source": [
        "os.environ['PATH'] += ':/home/miseo/.local/bin'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FIN1fRVKWR_8",
        "outputId": "566e7382-770d-449a-d512-d2906e9be103"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Downloading cse151b-spring2025-competition.zip to /home/miseo\n",
            "100%|████████████████████████████████████████▉| 351M/351M [00:01<00:00, 327MB/s]\n",
            "100%|█████████████████████████████████████████| 351M/351M [00:01<00:00, 325MB/s]\n"
          ]
        }
      ],
      "source": [
        "!kaggle competitions download -c cse151b-spring2025-competition\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Fdy3i6hHWR_8",
        "outputId": "1b03a843-0cbd-4ca4-ed14-131f9a8d3ddb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "replace climate_data/processed_data_cse151b_v2_corrupted_ssp245/processed_data_cse151b_v2_corrupted_ssp245.zarr/.zattrs? [y]es, [n]o, [A]ll, [N]one, [r]ename: ^C\n"
          ]
        }
      ],
      "source": [
        "!unzip -q cse151b-spring2025-competition.zip -d climate_data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "65l4RqZqWR_9"
      },
      "outputs": [],
      "source": [
        "!ls climate_data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6tXHt1ZhWR_9"
      },
      "source": [
        "### 🔧 Spatial Weighting Utility Function\n",
        "\n",
        "This cell sets up utility functions for reproducibility and spatial weighting:\n",
        "\n",
        "- **`get_lat_weights(latitude_values)`**: Computes cosine-based area weights for each latitude, accounting for the Earth's curvature. This is critical for evaluating global climate metrics fairly — grid cells near the equator represent larger surface areas than those near the poles.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1C3BP65NWR_9"
      },
      "outputs": [],
      "source": [
        "def get_lat_weights(latitude_values):\n",
        "    lat_rad = np.deg2rad(latitude_values)\n",
        "    weights = np.cos(lat_rad)\n",
        "    return weights / np.mean(weights)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I3EALKfqWR_9"
      },
      "source": [
        "### 🧠 SimpleCNN: A Residual Convolutional Baseline(Changed to Temporal U-net)\n",
        "\n",
        "This is a lightweight baseline model designed to capture spatial patterns in global climate data using convolutional layers.\n",
        "\n",
        "- The architecture starts with a **convolution + batch norm + ReLU** block to process the input channels.\n",
        "- It then applies a series of **residual blocks** to extract increasingly abstract spatial features. These help preserve gradient flow during training.\n",
        "- Finally, a few convolutional layers reduce the feature maps down to the desired number of output channels (`tas` and `pr`).\n",
        "\n",
        "This model only serves as a **simple baseline for climate emulation**.\n",
        "\n",
        "We encourage you to build and experiment with your own models and ideas.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tBZsi_eeWR_9"
      },
      "outputs": [],
      "source": [
        "class UNetBlock(nn.Module):\n",
        "    def __init__(self, in_ch, out_ch):\n",
        "        super().__init__()\n",
        "        self.conv = nn.Sequential(\n",
        "            nn.Conv2d(in_ch, out_ch, kernel_size=3, padding=1),\n",
        "            nn.BatchNorm2d(out_ch),\n",
        "            nn.ReLU(),\n",
        "            nn.Conv2d(out_ch, out_ch, kernel_size=3, padding=1),\n",
        "            nn.BatchNorm2d(out_ch),\n",
        "            nn.ReLU(),\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.conv(x)\n",
        "\n",
        "class UNetTemporal(nn.Module):\n",
        "    def __init__(self, in_channels, out_channels, init_dim=64, depth=4):\n",
        "        super().__init__()\n",
        "        self.depth = depth\n",
        "        self.input_proj = nn.Conv2d(in_channels, init_dim, kernel_size=1)  # NEW\n",
        "        self.downs = nn.ModuleList()\n",
        "        self.ups = nn.ModuleList()\n",
        "\n",
        "        chs = [init_dim * 2**i for i in range(depth)]\n",
        "\n",
        "        for i in range(depth):\n",
        "            self.downs.append(UNetBlock(init_dim if i == 0 else chs[i-1], chs[i]))\n",
        "        self.pool = nn.MaxPool2d(2)\n",
        "\n",
        "        for i in range(depth-1, 0, -1):\n",
        "            self.ups.append(nn.ConvTranspose2d(chs[i], chs[i-1], 2, stride=2))\n",
        "            self.ups.append(UNetBlock(chs[i-1] * 2, chs[i-1]))\n",
        "\n",
        "        self.out_conv = nn.Conv2d(chs[0], out_channels, kernel_size=1)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = x.mean(dim=1)  # Temporal average → (B, C, H, W)\n",
        "        x = self.input_proj(x)  # Project to init_dim\n",
        "\n",
        "        encs = []\n",
        "        for down in self.downs:\n",
        "            x = down(x)\n",
        "            encs.append(x)\n",
        "            x = self.pool(x)\n",
        "\n",
        "        for i in range(0, len(self.ups), 2):\n",
        "            x = self.ups[i](x)\n",
        "            skip = encs[-(i//2 + 2)] if i != len(self.ups) - 2 else encs[0]  # safe indexing\n",
        "            if x.shape[2:] != skip.shape[2:]:\n",
        "                x = F.interpolate(x, size=skip.shape[2:], mode='bilinear', align_corners=False)\n",
        "            x = torch.cat([x, skip], dim=1)\n",
        "            x = self.ups[i+1](x)\n",
        "\n",
        "        return self.out_conv(x)\n"
      ]
    },
    {
      "cell_type": "raw",
      "metadata": {
        "id": "95iSKKolWR_-"
      },
      "source": [
        "class ResidualBlock(nn.Module):\n",
        "    def __init__(self, channels):\n",
        "        super().__init__()\n",
        "        self.block = nn.Sequential(\n",
        "            nn.Conv2d(channels, channels, kernel_size=3, padding=1),\n",
        "            nn.BatchNorm2d(channels),\n",
        "            nn.ReLU(inplace=True),\n",
        "            nn.Conv2d(channels, channels, kernel_size=3, padding=1),\n",
        "            nn.BatchNorm2d(channels)\n",
        "        )\n",
        "        self.relu = nn.ReLU(inplace=True)\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.relu(x + self.block(x))\n",
        "\n",
        "class ResidualTemporalCNN(nn.Module):\n",
        "    def __init__(self, in_channels, out_channels, init_dim=64, depth=4, dropout_rate=0.1):\n",
        "        super().__init__()\n",
        "        self.init_dim = init_dim\n",
        "        self.encoder = nn.Sequential(\n",
        "            nn.Conv2d(in_channels, init_dim, kernel_size=3, padding=1),\n",
        "            nn.BatchNorm2d(init_dim),\n",
        "            nn.ReLU(inplace=True),\n",
        "            ResidualBlock(init_dim),\n",
        "            ResidualBlock(init_dim)\n",
        "        )\n",
        "\n",
        "        self.temporal_conv = nn.Conv1d(\n",
        "            in_channels=init_dim,\n",
        "            out_channels=init_dim,\n",
        "            kernel_size=5,\n",
        "            padding=2\n",
        "        )\n",
        "\n",
        "        self.decoder = nn.Sequential(\n",
        "            ResidualBlock(init_dim),\n",
        "            nn.Conv2d(init_dim, out_channels, kernel_size=1)\n",
        "        )\n",
        "\n",
        "\n",
        "    def forward(self, x):\n",
        "        print(\"Input shape:\", x.shape)\n",
        "        B, T, C, H, W = x.shape  # (batch, time, channel, height, width)\n",
        "        x = x.view(B * T, C, H, W)  # (B*T, C, H, W)\n",
        "\n",
        "        encoded = self.encoder(x)  # (B*T, hidden, H, W)\n",
        "        encoded = encoded.view(B, T, -1, H, W)  # (B, T, hidden, H, W)\n",
        "\n",
        "        encoded = encoded.permute(0, 3, 4, 1, 2)  # (B, H, W, T, C)\n",
        "        encoded = encoded.reshape(B * H * W, T, self.init_dim)  # (B*H*W, T, C)\n",
        "        encoded = encoded.permute(0, 2, 1)  # (B*H*W, C, T) — channels = C\n",
        "\n",
        "        # Now apply temporal convolution\n",
        "        encoded = self.temporal_conv(encoded)  # (B*H*W, C, T)\n",
        "        encoded = encoded.permute(0, 2, 1)  # (B*H*W, T, C)\n",
        "        encoded = encoded.reshape(B, H, W, T, self.init_dim)  # (B, H, W, T, C)\n",
        "\n",
        "        # Step 5: Reshape back for decoding\n",
        "        encoded = encoded.permute(0, 3, 4, 1, 2)\n",
        "        out = []\n",
        "        for t in range(T):\n",
        "            decoded = self.decoder(encoded[:, t])  # (B, out_channels, H, W)\n",
        "            out.append(decoded.unsqueeze(1))\n",
        "        return torch.cat(out, dim=1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s8hjth9WWR_-"
      },
      "source": [
        "### 📐 Normalizer: Z-Score Scaling for Climate Inputs & Outputs\n",
        "\n",
        "This class handles **Z-score normalization**, a crucial preprocessing step for stable and efficient neural network training:\n",
        "\n",
        "- **`set_input_statistics(mean, std)` / `set_output_statistics(...)`**: Store the mean and standard deviation computed from the training data for later use.\n",
        "- **`normalize(data, data_type)`**: Standardizes the data using `(x - mean) / std`. This is applied separately to inputs and outputs.\n",
        "- **`inverse_transform_output(data)`**: Converts model predictions back to the original physical units (e.g., Kelvin for temperature, mm/day for precipitation).\n",
        "\n",
        "Normalizing the data ensures the model sees inputs with similar dynamic ranges and avoids biases caused by different variable scales.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rzCte7jXWR_-"
      },
      "outputs": [],
      "source": [
        "class Normalizer:\n",
        "    def __init__(self):\n",
        "        self.mean_in, self.std_in = None, None\n",
        "        self.mean_out, self.std_out = None, None\n",
        "\n",
        "    def set_input_statistics(self, mean, std):\n",
        "        self.mean_in = mean\n",
        "        self.std_in = std\n",
        "\n",
        "    def set_output_statistics(self, mean, std):\n",
        "        self.mean_out = mean\n",
        "        self.std_out = std\n",
        "        print(\"✔ Output mean:\", self.mean_out.flatten())\n",
        "        print(\"✔ Output std:\", self.std_out.flatten())\n",
        "\n",
        "    def normalize(self, data, data_type):\n",
        "        if data_type == \"input\":\n",
        "            return (data - self.mean_in) / self.std_in\n",
        "        elif data_type == \"output\":\n",
        "            return (data - self.mean_out) / self.std_out\n",
        "\n",
        "    def inverse_transform_output(self, data):\n",
        "        return data * self.std_out + self.mean_out\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h8uXuqP3WR_-"
      },
      "source": [
        "### 🌍 Data Module: Loading, Normalization, and Splitting\n",
        "\n",
        "This section handles the entire data pipeline, from loading the `.zarr` dataset to preparing PyTorch-ready DataLoaders.\n",
        "\n",
        "#### `ClimateDataset`\n",
        "- A simple PyTorch `Dataset` wrapper that preloads the entire (normalized) dataset into memory using Dask.\n",
        "- Converts the data to PyTorch tensors and handles any `NaN` checks up front.\n",
        "\n",
        "#### `ClimateDataModule`\n",
        "A PyTorch Lightning `DataModule` that handles:\n",
        "- ✅ **Loading data** from different SSP scenarios and ensemble members\n",
        "- ✅ **Broadcasting non-spatial inputs** (like CO₂) to match spatial grid size\n",
        "- ✅ **Normalization** using mean/std computed from training data only\n",
        "- ✅ **Splitting** into training, validation, and test sets:\n",
        "  - Training: All months from selected SSPs (except last 10 years of SSP370)\n",
        "  - Validation: Last 10 years (120 months) of SSP370\n",
        "  - Test: Last 10 years of SSP245 (unseen scenario)\n",
        "- ✅ **Batching** and parallelized data loading via PyTorch `DataLoader`s\n",
        "- ✅ **Latitude-based area weighting** for fair climate metric evaluation\n",
        "- Shape of the inputs are Batch_Size X 5 (num_input_variables) X 48 X 72\n",
        "- Shape of ouputputs are Batch_Size X 2 (num_output_variables) X 48 X 72\n",
        "\n",
        "> ℹ️ **Note:** You likely won’t need to modify this class but feel free to make modifications if you want to inlcude different ensemble mebers to feed more data to your models\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tjo5R0t6WR_-"
      },
      "outputs": [],
      "source": [
        "class ClimateDataset(Dataset):\n",
        "    def __init__(self, inputs_dask, outputs_dask, output_is_normalized=True):\n",
        "        self.size = inputs_dask.shape[0]\n",
        "        print(f\"Creating dataset with {self.size} samples...\")\n",
        "\n",
        "        inputs_np = inputs_dask.compute()\n",
        "        outputs_np = outputs_dask.compute()\n",
        "\n",
        "        self.inputs = torch.from_numpy(inputs_np).float()\n",
        "        self.outputs = torch.from_numpy(outputs_np).float()\n",
        "        self.output_is_normalized = output_is_normalized\n",
        "\n",
        "\n",
        "        if torch.isnan(self.inputs).any() or torch.isnan(self.outputs).any():\n",
        "            raise ValueError(\"NaNs found in dataset\")\n",
        "\n",
        "        print(\"Final dataset input shape:\", self.inputs.shape)\n",
        "        print(\"Final dataset output shape:\", self.outputs.shape)\n",
        "\n",
        "    def __len__(self):\n",
        "        return self.size\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        x = self.inputs[idx]          # (T, C, H, W)\n",
        "        y = self.outputs[idx]         # (C, H, W)\n",
        "        return x, y\n",
        "\n",
        "class ClimateDataModule(pl.LightningDataModule):\n",
        "    def __init__(\n",
        "        self,\n",
        "        path,\n",
        "        input_vars,\n",
        "        output_vars,\n",
        "        train_ssps,\n",
        "        test_ssp,\n",
        "        target_member_id,\n",
        "        val_split=0.1,\n",
        "        test_months=360,\n",
        "        batch_size=32,\n",
        "        num_workers=8,\n",
        "        seed=42,\n",
        "        context_months=1\n",
        "    ):\n",
        "        super().__init__()\n",
        "        self.path = path\n",
        "        self.input_vars = input_vars\n",
        "        self.output_vars = output_vars\n",
        "        self.train_ssps = train_ssps\n",
        "        self.test_ssp = test_ssp\n",
        "        self.target_member_id = target_member_id\n",
        "        self.val_split = val_split\n",
        "        self.test_months = test_months\n",
        "        self.batch_size = batch_size\n",
        "        self.num_workers = num_workers\n",
        "        self.seed = seed\n",
        "        self.context_months = context_months\n",
        "        self.normalizer = Normalizer()\n",
        "\n",
        "\n",
        "\n",
        "    def prepare_data(self):\n",
        "        assert os.path.exists(self.path), f\"Data path not found: {self.path}\"\n",
        "\n",
        "    def setup(self, stage=None):\n",
        "        ds = xr.open_zarr(self.path, consolidated=False, chunks={\"time\": 24})\n",
        "        spatial_template = ds[\"rsdt\"].isel(time=0, ssp=0, drop=True)\n",
        "\n",
        "        def load_ssp(ssp):\n",
        "            input_dask, output_dask = [], []\n",
        "            print(f\"\\n📦 Loading SSP: {ssp}\")\n",
        "            print(f\"✅ Expected input vars: {self.input_vars}\")\n",
        "            print(f\"✅ Expected output vars: {self.output_vars}\")\n",
        "\n",
        "            for var in self.input_vars:\n",
        "                da_var = ds[var].sel(ssp=ssp)\n",
        "                if \"latitude\" in da_var.dims:\n",
        "                    da_var = da_var.rename({\"latitude\": \"y\", \"longitude\": \"x\"})\n",
        "                if \"member_id\" in da_var.dims:\n",
        "                    da_var = da_var.sel(member_id=self.target_member_id)\n",
        "                if set(da_var.dims) == {\"time\"}:\n",
        "                    da_var = da_var.broadcast_like(spatial_template).transpose(\"time\", \"y\", \"x\")\n",
        "\n",
        "                input_dask.append(da_var.data)\n",
        "\n",
        "            for var in self.output_vars:\n",
        "                da_out = ds[var].sel(ssp=ssp, member_id=self.target_member_id)\n",
        "                if \"latitude\" in da_out.dims:\n",
        "                    da_out = da_out.rename({\"latitude\": \"y\", \"longitude\": \"x\"})\n",
        "\n",
        "                output_dask.append(da_out.data)\n",
        "\n",
        "            if len(output_dask) != len(self.output_vars):\n",
        "                raise ValueError(f\"❌ Expected {len(self.output_vars)} output variables, but got {len(output_dask)}\")\n",
        "\n",
        "\n",
        "            return da.stack(input_dask, axis=1), da.stack(output_dask, axis=1)\n",
        "\n",
        "\n",
        "        train_input, train_output, val_input, val_output = [], [], None, None\n",
        "\n",
        "        for ssp in self.train_ssps:\n",
        "            print(\"Available SSPs in dataset:\", ds[\"ssp\"].values)\n",
        "            print(\"Available member_ids:\", ds[\"tas\"].sel(ssp=\"ssp245\").coords[\"member_id\"].values)\n",
        "            x, y = load_ssp(ssp)\n",
        "\n",
        "            if ssp == \"ssp370\":\n",
        "                val_input = x[-self.test_months:]\n",
        "                val_output = y[-self.test_months:]\n",
        "                train_input.append(x[:-self.test_months])\n",
        "                train_output.append(y[:-self.test_months])\n",
        "            else:\n",
        "                train_input.append(x)\n",
        "                train_output.append(y)\n",
        "\n",
        "        train_input = da.concatenate(train_input, axis=0)\n",
        "        train_output = da.concatenate(train_output, axis=0)\n",
        "\n",
        "        self.normalizer.set_input_statistics(\n",
        "            mean=da.nanmean(train_input, axis=(0, 2, 3), keepdims=True).compute(),\n",
        "            std=da.nanstd(train_input, axis=(0, 2, 3), keepdims=True).compute(),\n",
        "        )\n",
        "        self.normalizer.set_output_statistics(\n",
        "            mean=da.nanmean(train_output, axis=(0, 2, 3), keepdims=True).compute(),\n",
        "            std=da.nanstd(train_output, axis=(0, 2, 3), keepdims=True).compute(),\n",
        "        )\n",
        "        print(\"Mean out:\", self.normalizer.mean_out)\n",
        "        print(\"Std out:\", self.normalizer.std_out)\n",
        "\n",
        "        train_input_norm = self.normalizer.normalize(train_input, \"input\")\n",
        "        train_output_norm = self.normalizer.normalize(train_output, \"output\")\n",
        "        val_input_norm = self.normalizer.normalize(val_input, \"input\")\n",
        "        val_output_norm = self.normalizer.normalize(val_output, \"output\")\n",
        "\n",
        "        def to_sequences(x, seq_len):\n",
        "            total = x.shape[0]\n",
        "            return da.stack([x[i:total - seq_len + i + 1] for i in range(seq_len)], axis=1)\n",
        "\n",
        "\n",
        "\n",
        "        test_input, test_output = load_ssp(self.test_ssp)\n",
        "        print(\"Test output shape:\", test_output.shape)\n",
        "        print(\"Test output mean (raw):\", da.nanmean(test_output).compute())\n",
        "        print(\"Test output std (raw):\", da.nanstd(test_output).compute())\n",
        "        test_input = test_input[-self.test_months:]\n",
        "        test_output = test_output[-self.test_months:]\n",
        "        test_input_norm = self.normalizer.normalize(test_input, \"input\")\n",
        "\n",
        "        print(\"Before to_sequences, train_input_norm shape:\", train_input_norm.shape)\n",
        "        T = self.context_months\n",
        "        train_input_seq = to_sequences(train_input_norm, T)\n",
        "        train_output_seq = train_output_norm[T - 1:, :, :, :]\n",
        "        val_input_seq = to_sequences(val_input_norm, T)\n",
        "        print(\"val_output_norm shape BEFORE slicing:\", val_output_norm.shape)\n",
        "        val_output_seq = val_output_norm[T - 1:, :, :, :]\n",
        "\n",
        "        test_input_seq = to_sequences(test_input_norm, T)\n",
        "        test_output_norm = self.normalizer.normalize(test_output, \"output\")\n",
        "        test_output_seq = test_output_norm[T - 1:, :, :, :]\n",
        "\n",
        "\n",
        "        self.train_dataset = ClimateDataset(train_input_seq, train_output_seq)\n",
        "        self.val_dataset = ClimateDataset(val_input_seq, val_output_seq)\n",
        "        self.test_dataset = ClimateDataset(test_input_seq, test_output_seq, output_is_normalized=True)\n",
        "\n",
        "        self.lat = spatial_template.y.values\n",
        "        self.lon = spatial_template.x.values\n",
        "        self.area_weights = xr.DataArray(get_lat_weights(self.lat), dims=[\"y\"], coords={\"y\": self.lat})\n",
        "\n",
        "    def train_dataloader(self):\n",
        "        return DataLoader(self.train_dataset, batch_size=self.batch_size, shuffle=True,\n",
        "                          num_workers=self.num_workers, pin_memory=True)\n",
        "\n",
        "    def val_dataloader(self):\n",
        "        return DataLoader(self.val_dataset, batch_size=self.batch_size, shuffle=False,\n",
        "                          num_workers=self.num_workers, pin_memory=True, persistent_workers=True)\n",
        "\n",
        "    def test_dataloader(self):\n",
        "        return DataLoader(self.test_dataset, batch_size=self.batch_size, shuffle=False,\n",
        "                          num_workers=self.num_workers, pin_memory=True, persistent_workers=True)\n",
        "\n",
        "\n",
        "    def get_lat_weights(self):\n",
        "        return self.area_weights\n",
        "\n",
        "    def get_coords(self):\n",
        "        return self.lat, self.lon\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GT9jpNUlWR__"
      },
      "source": [
        "### ⚡ ClimateEmulationModule: Lightning Wrapper for Climate Model Emulation\n",
        "\n",
        "This is the core model wrapper built with **PyTorch Lightning**, which organizes the training, validation, and testing logic for the climate emulation task. Lightning abstracts away much of the boilerplate code in PyTorch-based deep learning workflows, making it easier to scale models.\n",
        "\n",
        "#### ✅ Key Features\n",
        "\n",
        "- **`training_step` / `validation_step` / `test_step`**: Standard Lightning hooks for computing loss and predictions at each stage. The loss used is **Mean Squared Error (MSE)**.\n",
        "\n",
        "- **Normalization-aware outputs**:\n",
        "  - During validation and testing, predictions and targets are denormalized before evaluation using stored mean/std statistics.\n",
        "  - This ensures evaluation is done in real-world units (Kelvin and mm/day).\n",
        "\n",
        "- **Metric Evaluation** via `_evaluate()`:\n",
        "  For each variable (`tas`, `pr`), it calculates:\n",
        "  - **Monthly Area-Weighted RMSE**\n",
        "  - **Time-Mean RMSE** (RMSE on 10-year average's)\n",
        "  - **Time-Stddev MAE** (MAE on 10-year standard deviation; a measure of temporal variability)\n",
        "    \n",
        "  These metrics reflect the competition's evaluation criteria and are logged and printed.\n",
        "\n",
        "- **Kaggle Submission Writer**:\n",
        "  After testing, predictions are saved to a `.csv` file in the required Kaggle format via `_save_submission()`.\n",
        "\n",
        "- **Saving Predictions for Visualization**:\n",
        "  - Validation predictions are saved tao `val_preds.npy` and `val_trues.npy`\n",
        "  - These can be loaded later for visual inspection of the model's performance.\n",
        "\n",
        " 🔧 **Feel free to modify any part of this module** (loss functions, evaluation, training logic) to better suit your model or training pipeline / Use pure PyTorch etc.\n",
        "\n",
        "⚠️ The **final submission `.csv` file must strictly follow the format and naming convention used in `_save_submission()`**, as these `ID`s are used to match predictions to the hidden test set during evaluation.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JwUNdNngWR__"
      },
      "outputs": [],
      "source": [
        "class CustomLoss(nn.Module):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.mse = nn.MSELoss()\n",
        "\n",
        "    def forward(self, y_pred, y_true):\n",
        "        return self.mse(y_pred, y_true)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5s47OZgdWR__"
      },
      "outputs": [],
      "source": [
        "class ClimateEmulationModule(pl.LightningModule):\n",
        "    def __init__(self, model, learning_rate=1e-4):\n",
        "        super().__init__()\n",
        "        self.model = model\n",
        "        self.save_hyperparameters(ignore=['model'])\n",
        "        self.criterion = CustomLoss()\n",
        "        self.normalizer = None\n",
        "        self.val_preds, self.val_targets = [], []\n",
        "        self.test_preds, self.test_targets = [], []\n",
        "        self.test_output_is_normalized = True\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.model(x)\n",
        "\n",
        "    def on_fit_start(self):\n",
        "        self.normalizer = self.trainer.datamodule.normalizer\n",
        "\n",
        "    def training_step(self, batch, batch_idx):\n",
        "        x, y = batch  # x: (B, T, C, H, W), y: (B, C, H, W)\n",
        "        y_hat = self(x)  # y_hat: (B, C, H, W)\n",
        "        loss = self.criterion(y_hat, y)\n",
        "        self.log(\"train/loss\", loss)\n",
        "        return loss\n",
        "\n",
        "    def validation_step(self, batch, batch_idx):\n",
        "        x, y = batch\n",
        "        y_hat = self(x)\n",
        "        loss = self.criterion(y_hat, y)\n",
        "        self.log(\"val/loss\", loss)\n",
        "\n",
        "        y_hat_np = self.normalizer.inverse_transform_output(y_hat.detach().cpu().numpy())\n",
        "        y_np = self.normalizer.inverse_transform_output(y.detach().cpu().numpy())\n",
        "\n",
        "        self.val_preds.append(y_hat_np)\n",
        "        self.val_targets.append(y_np)\n",
        "        return loss\n",
        "\n",
        "    def on_validation_epoch_end(self):\n",
        "        preds = np.concatenate(self.val_preds, axis=0)\n",
        "        trues = np.concatenate(self.val_targets, axis=0)\n",
        "        self._evaluate(preds, trues, phase=\"val\")\n",
        "        np.save(\"val_preds.npy\", preds)\n",
        "        np.save(\"val_trues.npy\", trues)\n",
        "        self.val_preds.clear()\n",
        "        self.val_targets.clear()\n",
        "\n",
        "\n",
        "    def test_step(self, batch, batch_idx):\n",
        "        x, y = batch\n",
        "        y_hat = self(x)  # (B, C, H, W)\n",
        "\n",
        "\n",
        "        self.test_preds.append(y_hat.detach().cpu().numpy())\n",
        "        self.test_targets.append(y.detach().cpu().numpy())\n",
        "\n",
        "        return {\"test_loss\": self.criterion(y_hat, y)}\n",
        "\n",
        "    def on_test_epoch_end(self):\n",
        "        preds = np.concatenate(self.test_preds, axis=0)  # (B, C, H, W)\n",
        "        trues = np.concatenate(self.test_targets, axis=0)\n",
        "\n",
        "        if self.test_output_is_normalized:\n",
        "            preds = self.normalizer.inverse_transform_output(preds)\n",
        "            trues = self.normalizer.inverse_transform_output(trues)\n",
        "        else:\n",
        "            preds = self.normalizer.inverse_transform_output(preds)\n",
        "\n",
        "\n",
        "        self._evaluate(preds, trues, phase=\"test\")\n",
        "        np.save(\"test_preds.npy\", preds)\n",
        "        np.save(\"test_trues.npy\", trues)\n",
        "        self.test_preds.clear()\n",
        "        self.test_targets.clear()\n",
        "        print(\"tas mean prediction:\", preds[:, 0].mean())\n",
        "        print(\"tas std prediction:\", preds[:, 0].std())\n",
        "        print(\"tas mean true:\", trues[:, 0].mean())\n",
        "        print(\"tas std true:\", trues[:, 0].std())\n",
        "\n",
        "    def configure_optimizers(self):\n",
        "        return optim.Adam(self.parameters(), lr=self.hparams.learning_rate)\n",
        "\n",
        "    def _evaluate(self, preds, trues, phase=\"val\"):\n",
        "        datamodule = self.trainer.datamodule\n",
        "        area_weights = datamodule.get_lat_weights()\n",
        "        lat, lon = datamodule.get_coords()\n",
        "        time = np.arange(preds.shape[0])\n",
        "        output_vars = datamodule.output_vars\n",
        "\n",
        "        if preds.ndim != 4 or trues.ndim != 4:\n",
        "            raise ValueError(\"Expected 4D tensors (time, channel, y, x) for evaluation\")\n",
        "\n",
        "        for i, var in enumerate(output_vars):\n",
        "            p = preds[:, i, :, :]\n",
        "            t = trues[:, i, :, :]\n",
        "\n",
        "            p_xr = xr.DataArray(p, dims=[\"time\", \"y\", \"x\"], coords={\"time\": time, \"y\": lat, \"x\": lon})\n",
        "            t_xr = xr.DataArray(t, dims=[\"time\", \"y\", \"x\"], coords={\"time\": time, \"y\": lat, \"x\": lon})\n",
        "\n",
        "            rmse = np.sqrt(((p_xr - t_xr) ** 2).weighted(area_weights).mean((\"time\", \"y\", \"x\")).item())\n",
        "            mean_rmse = np.sqrt(((p_xr.mean(\"time\") - t_xr.mean(\"time\")) ** 2).weighted(area_weights).mean((\"y\", \"x\")).item())\n",
        "            std_mae = np.abs(p_xr.std(\"time\") - t_xr.std(\"time\")).weighted(area_weights).mean((\"y\", \"x\")).item()\n",
        "\n",
        "            print(f\"[{phase.upper()}] {var}: RMSE={rmse:.4f}, Time-Mean RMSE={mean_rmse:.4f}, Time-Stddev MAE={std_mae:.4f}\")\n",
        "            self.log_dict({\n",
        "                f\"{phase}/{var}/rmse\": rmse,\n",
        "                f\"{phase}/{var}/time_mean_rmse\": mean_rmse,\n",
        "                f\"{phase}/{var}/time_std_mae\": std_mae,\n",
        "            })\n",
        "\n",
        "    def generate_kaggle_submission(self, predictions, filename=None):\n",
        "        datamodule = self.trainer.datamodule\n",
        "        lat, lon = datamodule.get_coords()\n",
        "        output_vars = datamodule.output_vars\n",
        "        time = np.arange(predictions.shape[0])\n",
        "\n",
        "        rows = []\n",
        "        for t_idx, t in enumerate(time):\n",
        "            for var_idx, var in enumerate(output_vars):\n",
        "                for y_idx, y in enumerate(lat):\n",
        "                    for x_idx, x in enumerate(lon):\n",
        "                        row_id = f\"t{t_idx:03d}_{var}_{y:.2f}_{x:.2f}\"\n",
        "                        pred = predictions[t_idx, var_idx, y_idx, x_idx]\n",
        "                        rows.append({\"ID\": row_id, \"Prediction\": pred})\n",
        "\n",
        "        df = pd.DataFrame(rows)\n",
        "        os.makedirs(\"submissions\", exist_ok=True)\n",
        "        if filename is None:\n",
        "            filename = f\"submissions/kaggle_submission_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv\"\n",
        "        df.to_csv(filename, index=False)\n",
        "        print(f\"✅ Kaggle submission saved to: {filename}\")"
      ]
    },
    {
      "cell_type": "raw",
      "metadata": {
        "id": "v2q4GE2kWR__"
      },
      "source": [
        "import pandas as pd\n",
        "\n",
        "class ClimateEmulationModule(pl.LightningModule):\n",
        "    def __init__(self, model, learning_rate=1e-4):\n",
        "        super().__init__()\n",
        "        self.model = model\n",
        "        self.save_hyperparameters(ignore=['model']) # Save all hyperparameters except the model to self.hparams.<param_name>\n",
        "        self.criterion = nn.MSELoss()\n",
        "        self.normalizer = None\n",
        "        self.val_preds, self.val_targets = [], []\n",
        "        self.test_preds, self.test_targets = [], []\n",
        "\n",
        "    def forward(self, x):\n",
        "\n",
        "        return self.model(x)\n",
        "\n",
        "    def on_fit_start(self):\n",
        "        self.normalizer = self.trainer.datamodule.normalizer  # Get the normalizer from the datamodule (see above)\n",
        "\n",
        "    def training_step(self, batch, batch_idx):\n",
        "        x, y = batch # Unpack inputs and targets (this is the output of the _getitem_ method in the Dataset above)\n",
        "        y_hat = self(x)\n",
        "        y_hat_last = y_hat[:, -1]  # Shape: (B, 2, H, W)\n",
        "        loss = self.criterion(y_hat_last, y)\n",
        "        self.log(\"train/loss\", loss)  # Log loss for tracking\n",
        "        return loss\n",
        "\n",
        "    def validation_step(self, batch, batch_idx):\n",
        "        x, y = batch\n",
        "        y_hat = self(x)\n",
        "        y_hat_last = y_hat[:, -1]  # Last time step output\n",
        "        y_last = y  # Already (B, C, H, W)\n",
        "\n",
        "        loss = self.criterion(y_hat_last, y_last)\n",
        "        self.log(\"val/loss\", loss)\n",
        "\n",
        "        y_hat_np = self.normalizer.inverse_transform_output(y_hat_last.detach().cpu().numpy())\n",
        "        y_np = self.normalizer.inverse_transform_output(y_last.detach().cpu().numpy())\n",
        "\n",
        "        self.val_preds.append(y_hat_np)\n",
        "        self.val_targets.append(y_np)\n",
        "\n",
        "        return loss\n",
        "\n",
        "    def on_validation_epoch_end(self):\n",
        "        # Concatenate all predictions and ground truths from each val step/batch into one array\n",
        "        preds = np.concatenate(self.val_preds, axis=0)\n",
        "        trues = np.concatenate(self.val_targets, axis=0)\n",
        "\n",
        "        self._evaluate(preds, trues, phase=\"val\")\n",
        "        np.save(\"val_preds.npy\", preds)\n",
        "        np.save(\"val_trues.npy\", trues)\n",
        "        self.val_preds.clear()\n",
        "        self.val_targets.clear()\n",
        "\n",
        "    def test_step(self, batch, batch_idx):\n",
        "        x, y = batch\n",
        "        y_hat = self.model(x)\n",
        "\n",
        "        y_hat_last = y_hat[:, -1, :, :, :]\n",
        "\n",
        "\n",
        "        loss = self.criterion(y_hat_last, y)\n",
        "        self.test_preds.append(y_hat_last.detach().cpu().numpy())\n",
        "        self.test_targets.append(y.detach().cpu().numpy())\n",
        "        return {\"test_loss\": loss}\n",
        "\n",
        "    def on_test_epoch_end(self):\n",
        "        preds = np.concatenate(self.test_preds, axis=0)\n",
        "        trues = np.concatenate(self.test_targets, axis=0)\n",
        "        print(f\"DEBUG test preds shape: {preds.shape}\")\n",
        "        print(f\"DEBUG test trues shape: {trues.shape}\")\n",
        "\n",
        "        # If preds is already (B, C, H, W), do not index with 5 dimensio\n",
        "\n",
        "        self._evaluate(preds, trues, phase=\"test\")\n",
        "\n",
        "        np.save(\"test_preds.npy\", preds)\n",
        "        np.save(\"test_trues.npy\", trues)\n",
        "\n",
        "        self.test_preds.clear()\n",
        "        self.test_targets.clear()\n",
        "\n",
        "    def configure_optimizers(self):\n",
        "        return optim.Adam(self.parameters(), lr=self.hparams.learning_rate)\n",
        "\n",
        "    def _evaluate(self, preds, trues, phase=\"val\"):\n",
        "        datamodule = self.trainer.datamodule\n",
        "        area_weights = datamodule.get_lat_weights()\n",
        "        lat, lon = datamodule.get_coords()\n",
        "        time = np.arange(preds.shape[0])\n",
        "        output_vars = datamodule.output_vars\n",
        "        if trues.ndim == 3:\n",
        "            trues = trues[:, np.newaxis, :, :]\n",
        "\n",
        "        if trues.shape[1] != preds.shape[1]:\n",
        "            raise ValueError(\n",
        "                f\"Mismatch: trues.shape={trues.shape}, expected channels={preds.shape[1]} for output_vars={output_vars}\"\n",
        "            )\n",
        "        print(\"preds shape:\", preds.shape)\n",
        "        print(\"trues shape:\", trues.shape)\n",
        "\n",
        "        for i, var in enumerate(output_vars):\n",
        "            p = preds[:, i, :, :]  # (B, H, W)\n",
        "            t = trues[:, i, :, :]  # (B, H, W)\n",
        "\n",
        "            # Sanity check\n",
        "            assert p.ndim == 3, f\"Expected 3D data for xarray (time, y, x), got {p.shape}\"\n",
        "            assert t.ndim == 3, f\"Expected 3D data for xarray (time, y, x), got {t.shape}\"\n",
        "\n",
        "            p_xr = xr.DataArray(p, dims=[\"time\", \"y\", \"x\"], coords={\"time\": time, \"y\": lat, \"x\": lon})\n",
        "            t_xr = xr.DataArray(t, dims=[\"time\", \"y\", \"x\"], coords={\"time\": time, \"y\": lat, \"x\": lon})\n",
        "\n",
        "            # RMSE\n",
        "            rmse = np.sqrt(((p_xr - t_xr) ** 2).weighted(area_weights).mean((\"time\", \"y\", \"x\")).item())\n",
        "            # RMSE of time-mean\n",
        "            mean_rmse = np.sqrt(((p_xr.mean(\"time\") - t_xr.mean(\"time\")) ** 2).weighted(area_weights).mean((\"y\", \"x\")).item())\n",
        "            # MAE of time-stddev\n",
        "            std_mae = np.abs(p_xr.std(\"time\") - t_xr.std(\"time\")).weighted(area_weights).mean((\"y\", \"x\")).item()\n",
        "\n",
        "            print(f\"[{phase.upper()}] {var}: RMSE={rmse:.4f}, Time-Mean RMSE={mean_rmse:.4f}, Time-Stddev MAE={std_mae:.4f}\")\n",
        "            self.log_dict({\n",
        "                f\"{phase}/{var}/rmse\": rmse,\n",
        "                f\"{phase}/{var}/time_mean_rmse\": mean_rmse,\n",
        "                f\"{phase}/{var}/time_std_mae\": std_mae,\n",
        "            })\n",
        "\n",
        "    def _save_submission(self, predictions):\n",
        "        datamodule = self.trainer.datamodule\n",
        "        lat, lon = datamodule.get_coords()\n",
        "        output_vars = datamodule.output_vars\n",
        "        time = np.arange(predictions.shape[0])\n",
        "\n",
        "        rows = []\n",
        "        for t_idx, t in enumerate(time):\n",
        "            for var_idx, var in enumerate(output_vars):\n",
        "                for y_idx, y in enumerate(lat):\n",
        "                    for x_idx, x in enumerate(lon):\n",
        "                        row_id = f\"t{t_idx:03d}_{var}_{y:.2f}_{x:.2f}\"\n",
        "                        pred = predictions[t_idx, var_idx, y_idx, x_idx]\n",
        "                        rows.append({\"ID\": row_id, \"Prediction\": pred})\n",
        "\n",
        "        df = pd.DataFrame(rows)\n",
        "        os.makedirs(\"submissions\", exist_ok=True)\n",
        "        filepath = f\"submissions/kaggle_submission_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv\"\n",
        "        df.to_csv(filepath, index=False)\n",
        "        print(f\"✅ Submission saved to: {filepath}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OzMdYd3_WSAA"
      },
      "source": [
        "### ⚡ Training & Evaluation with PyTorch Lightning\n",
        "\n",
        "This block sets up and runs the training and testing pipeline using **PyTorch Lightning’s `Trainer`**, which abstracts away much of the boilerplate in deep learning workflows.\n",
        "\n",
        "- **Modular Setup**:\n",
        "  - `datamodule`: Handles loading, normalization, and batching of climate data.\n",
        "  - `model`: A convolutional neural network that maps climate forcings to predicted outputs.\n",
        "  - `lightning_module`: Wraps the model with training/validation/test logic and metric evaluation.\n",
        "\n",
        "- **Trainer Flexibility**:\n",
        "  The `Trainer` accepts a wide range of configuration options from `config[\"trainer\"]`, including:\n",
        "  - Number of epochs\n",
        "  - Precision (e.g., 16-bit or 32-bit)\n",
        "  - Device configuration (CPU, GPU, or TPU)\n",
        "  - Determinism, logging, callbacks, and more"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "referenced_widgets": [
            "b9b2f6c6f8c44608ad1a96151806ea39",
            ""
          ]
        },
        "id": "nrV3PG9eWSAA",
        "outputId": "ed5dea14-4a58-44cc-9c5f-1f998968a248"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Using 16bit Automatic Mixed Precision (AMP)\n",
            "Using default `ModelCheckpoint`. Consider installing `litmodels` package to enable `LitModelCheckpoint` for automatic upload to the Lightning model registry.\n",
            "GPU available: True (cuda), used: True\n",
            "TPU available: False, using: 0 TPU cores\n",
            "HPU available: False, using: 0 HPUs\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Available SSPs in dataset: ['ssp126' 'ssp245' 'ssp370' 'ssp585']\n",
            "Available member_ids: [0 1 2]\n",
            "\n",
            "📦 Loading SSP: ssp126\n",
            "✅ Expected input vars: ['CO2', 'SO2', 'CH4', 'BC', 'rsdt']\n",
            "✅ Expected output vars: ['tas', 'pr']\n",
            "Available SSPs in dataset: ['ssp126' 'ssp245' 'ssp370' 'ssp585']\n",
            "Available member_ids: [0 1 2]\n",
            "\n",
            "📦 Loading SSP: ssp370\n",
            "✅ Expected input vars: ['CO2', 'SO2', 'CH4', 'BC', 'rsdt']\n",
            "✅ Expected output vars: ['tas', 'pr']\n",
            "Available SSPs in dataset: ['ssp126' 'ssp245' 'ssp370' 'ssp585']\n",
            "Available member_ids: [0 1 2]\n",
            "\n",
            "📦 Loading SSP: ssp585\n",
            "✅ Expected input vars: ['CO2', 'SO2', 'CH4', 'BC', 'rsdt']\n",
            "✅ Expected output vars: ['tas', 'pr']\n",
            "✔ Output mean: [280.59796    2.519279]\n",
            "✔ Output std: [20.98827    2.9703383]\n",
            "Mean out: [[[[280.59796 ]]\n",
            "\n",
            "  [[  2.519279]]]]\n",
            "Std out: [[[[20.98827  ]]\n",
            "\n",
            "  [[ 2.9703383]]]]\n",
            "\n",
            "📦 Loading SSP: ssp245\n",
            "✅ Expected input vars: ['CO2', 'SO2', 'CH4', 'BC', 'rsdt']\n",
            "✅ Expected output vars: ['tas', 'pr']\n",
            "Test output shape: (1021, 2, 48, 72)\n",
            "Test output mean (raw): 0.0\n",
            "Test output std (raw): 0.0\n",
            "Before to_sequences, train_input_norm shape: (2703, 5, 48, 72)\n",
            "val_output_norm shape BEFORE slicing: (360, 2, 48, 72)\n",
            "Creating dataset with 2703 samples...\n",
            "Final dataset input shape: torch.Size([2703, 1, 5, 48, 72])\n",
            "Final dataset output shape: torch.Size([2703, 2, 48, 72])\n",
            "Creating dataset with 360 samples...\n",
            "Final dataset input shape: torch.Size([360, 1, 5, 48, 72])\n",
            "Final dataset output shape: torch.Size([360, 2, 48, 72])\n",
            "Creating dataset with 360 samples...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]\n",
            "\n",
            "  | Name      | Type         | Params | Mode \n",
            "---------------------------------------------------\n",
            "0 | model     | UNetTemporal | 7.7 M  | train\n",
            "1 | criterion | CustomLoss   | 0      | train\n",
            "---------------------------------------------------\n",
            "7.7 M     Trainable params\n",
            "0         Non-trainable params\n",
            "7.7 M     Total params\n",
            "30.954    Total estimated model params size (MB)\n",
            "67        Modules in train mode\n",
            "0         Modules in eval mode\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Final dataset input shape: torch.Size([360, 1, 5, 48, 72])\n",
            "Final dataset output shape: torch.Size([360, 2, 48, 72])\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/home/miseo/.local/lib/python3.11/site-packages/lightning/pytorch/loops/fit_loop.py:310: The number of training batches (43) is smaller than the logging interval Trainer(log_every_n_steps=50). Set a lower value for log_every_n_steps if you want to see logs for the training epoch.\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "b9b2f6c6f8c44608ad1a96151806ea39",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Training: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=5.3443, Time-Mean RMSE=3.9130, Time-Stddev MAE=1.3959\n",
            "[VAL] pr: RMSE=2.9855, Time-Mean RMSE=1.3505, Time-Stddev MAE=1.5084\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=4.5627, Time-Mean RMSE=2.9962, Time-Stddev MAE=1.4363\n",
            "[VAL] pr: RMSE=2.7193, Time-Mean RMSE=0.9108, Time-Stddev MAE=1.4874\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=4.2634, Time-Mean RMSE=2.5121, Time-Stddev MAE=1.0013\n",
            "[VAL] pr: RMSE=2.5812, Time-Mean RMSE=0.7722, Time-Stddev MAE=1.1894\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=2.5964, Time-Mean RMSE=1.7616, Time-Stddev MAE=0.6743\n",
            "[VAL] pr: RMSE=2.1073, Time-Mean RMSE=0.5881, Time-Stddev MAE=0.8642\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=2.1993, Time-Mean RMSE=1.3684, Time-Stddev MAE=0.5682\n",
            "[VAL] pr: RMSE=2.0417, Time-Mean RMSE=0.4541, Time-Stddev MAE=0.8629\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=2.2209, Time-Mean RMSE=1.3583, Time-Stddev MAE=0.6871\n",
            "[VAL] pr: RMSE=2.0082, Time-Mean RMSE=0.4033, Time-Stddev MAE=0.7694\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=2.5767, Time-Mean RMSE=1.4439, Time-Stddev MAE=0.5585\n",
            "[VAL] pr: RMSE=2.1156, Time-Mean RMSE=0.4540, Time-Stddev MAE=0.9019\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=2.3196, Time-Mean RMSE=1.5902, Time-Stddev MAE=0.5699\n",
            "[VAL] pr: RMSE=2.0041, Time-Mean RMSE=0.3842, Time-Stddev MAE=0.7235\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.8418, Time-Mean RMSE=1.0771, Time-Stddev MAE=0.4172\n",
            "[VAL] pr: RMSE=1.9654, Time-Mean RMSE=0.3235, Time-Stddev MAE=0.7636\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.9740, Time-Mean RMSE=1.2707, Time-Stddev MAE=0.5265\n",
            "[VAL] pr: RMSE=1.9754, Time-Mean RMSE=0.3583, Time-Stddev MAE=0.7893\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.9195, Time-Mean RMSE=1.1344, Time-Stddev MAE=0.4830\n",
            "[VAL] pr: RMSE=1.9649, Time-Mean RMSE=0.3055, Time-Stddev MAE=0.7222\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.7049, Time-Mean RMSE=0.8553, Time-Stddev MAE=0.4358\n",
            "[VAL] pr: RMSE=1.9550, Time-Mean RMSE=0.3154, Time-Stddev MAE=0.7470\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.6810, Time-Mean RMSE=0.8604, Time-Stddev MAE=0.3559\n",
            "[VAL] pr: RMSE=1.9606, Time-Mean RMSE=0.3092, Time-Stddev MAE=0.7931\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.7879, Time-Mean RMSE=1.0755, Time-Stddev MAE=0.3800\n",
            "[VAL] pr: RMSE=1.9450, Time-Mean RMSE=0.2701, Time-Stddev MAE=0.7151\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.6382, Time-Mean RMSE=0.8581, Time-Stddev MAE=0.3784\n",
            "[VAL] pr: RMSE=1.9463, Time-Mean RMSE=0.2653, Time-Stddev MAE=0.7710\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.7020, Time-Mean RMSE=0.8872, Time-Stddev MAE=0.4066\n",
            "[VAL] pr: RMSE=1.9548, Time-Mean RMSE=0.2733, Time-Stddev MAE=0.7454\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.5871, Time-Mean RMSE=0.7683, Time-Stddev MAE=0.3588\n",
            "[VAL] pr: RMSE=1.9555, Time-Mean RMSE=0.3018, Time-Stddev MAE=0.8374\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.5921, Time-Mean RMSE=0.8203, Time-Stddev MAE=0.3550\n",
            "[VAL] pr: RMSE=1.9460, Time-Mean RMSE=0.2743, Time-Stddev MAE=0.7556\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.5565, Time-Mean RMSE=0.7446, Time-Stddev MAE=0.3447\n",
            "[VAL] pr: RMSE=1.9491, Time-Mean RMSE=0.2848, Time-Stddev MAE=0.8003\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.5652, Time-Mean RMSE=0.7795, Time-Stddev MAE=0.3860\n",
            "[VAL] pr: RMSE=1.9430, Time-Mean RMSE=0.2550, Time-Stddev MAE=0.7349\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.5774, Time-Mean RMSE=0.7990, Time-Stddev MAE=0.3663\n",
            "[VAL] pr: RMSE=1.9528, Time-Mean RMSE=0.2847, Time-Stddev MAE=0.8026\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.5046, Time-Mean RMSE=0.7124, Time-Stddev MAE=0.3448\n",
            "[VAL] pr: RMSE=1.9542, Time-Mean RMSE=0.3003, Time-Stddev MAE=0.7995\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.4932, Time-Mean RMSE=0.6811, Time-Stddev MAE=0.3216\n",
            "[VAL] pr: RMSE=1.9615, Time-Mean RMSE=0.2993, Time-Stddev MAE=0.6875\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.5525, Time-Mean RMSE=0.7649, Time-Stddev MAE=0.3651\n",
            "[VAL] pr: RMSE=1.9433, Time-Mean RMSE=0.2711, Time-Stddev MAE=0.7894\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.5671, Time-Mean RMSE=0.8615, Time-Stddev MAE=0.3360\n",
            "[VAL] pr: RMSE=1.9505, Time-Mean RMSE=0.2801, Time-Stddev MAE=0.8517\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.5094, Time-Mean RMSE=0.6664, Time-Stddev MAE=0.3065\n",
            "[VAL] pr: RMSE=1.9408, Time-Mean RMSE=0.2356, Time-Stddev MAE=0.7371\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.4705, Time-Mean RMSE=0.6567, Time-Stddev MAE=0.2888\n",
            "[VAL] pr: RMSE=1.9375, Time-Mean RMSE=0.2313, Time-Stddev MAE=0.7885\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.6923, Time-Mean RMSE=1.1023, Time-Stddev MAE=0.2968\n",
            "[VAL] pr: RMSE=1.9408, Time-Mean RMSE=0.2505, Time-Stddev MAE=0.7742\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.4652, Time-Mean RMSE=0.6296, Time-Stddev MAE=0.3768\n",
            "[VAL] pr: RMSE=1.9412, Time-Mean RMSE=0.2515, Time-Stddev MAE=0.7804\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Validation: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[VAL] tas: RMSE=1.4746, Time-Mean RMSE=0.7139, Time-Stddev MAE=0.3178\n",
            "[VAL] pr: RMSE=1.9396, Time-Mean RMSE=0.2573, Time-Stddev MAE=0.7503\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "`Trainer.fit` stopped: `max_epochs=30` reached.\n"
          ]
        }
      ],
      "source": [
        "datamodule = ClimateDataModule(**config[\"data\"])\n",
        "context_months = config[\"data\"].get(\"context_months\", 1)\n",
        "\n",
        "# UNetTemporal expects input shape (B, T, C, H, W), and averages over T → resulting in (B, C, H, W)\n",
        "in_channels = len(config[\"data\"][\"input_vars\"])  # NOT multiplied by context_months\n",
        "out_channels = len(config[\"data\"][\"output_vars\"])\n",
        "\n",
        "model = UNetTemporal(\n",
        "    in_channels=in_channels,\n",
        "    out_channels=out_channels,\n",
        "    init_dim=config[\"model\"][\"init_dim\"],\n",
        "    depth=config[\"model\"][\"depth\"]\n",
        ")\n",
        "\n",
        "lightning_module = ClimateEmulationModule(model, learning_rate=config[\"training\"][\"lr\"])\n",
        "\n",
        "trainer = pl.Trainer(**config[\"trainer\"])\n",
        "trainer.fit(lightning_module, datamodule=datamodule)"
      ]
    },
    {
      "cell_type": "raw",
      "metadata": {
        "id": "He6ERySUWSAA"
      },
      "source": [
        "datamodule = ClimateDataModule(**config[\"data\"])\n",
        "context_months = config[\"data\"].get(\"context_months\", 1)\n",
        "in_channels = context_months * len(config[\"data\"][\"input_vars\"])\n",
        "\n",
        "model = ResidualTemporalCNN(\n",
        "    in_channels=len(config[\"data\"][\"input_vars\"]),\n",
        "    out_channels=len(config[\"data\"][\"output_vars\"]),\n",
        "    init_dim=config[\"model\"][\"init_dim\"],\n",
        "    depth=config[\"model\"][\"depth\"],\n",
        "    dropout_rate=config[\"model\"][\"dropout_rate\"],\n",
        ")\n",
        "\n",
        "lightning_module = ClimateEmulationModule(model, learning_rate=config[\"training\"][\"lr\"])\n",
        "\n",
        "trainer = pl.Trainer(**config[\"trainer\"])\n",
        "trainer.fit(lightning_module, datamodule=datamodule)   # Training\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KiSBIMZkWSAA"
      },
      "source": [
        "# Test model\n",
        "\n",
        "**IMPORTANT:** Please note that the test metrics will be bad because the test targets have been corrupted on the public Kaggle dataset.\n",
        "The purpose of testing below is to generate the Kaggle submission file based on your model's predictions, which you can submit to the competition."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "referenced_widgets": [
            "619062247e9d42c4b2fac32436c28d5e"
          ]
        },
        "id": "LHjOabB4WSAA",
        "outputId": "8acfbee0-fe24-4cb6-e6cd-7da202ac65cd"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Available SSPs in dataset: ['ssp126' 'ssp245' 'ssp370' 'ssp585']\n",
            "Available member_ids: [0 1 2]\n",
            "\n",
            "📦 Loading SSP: ssp126\n",
            "✅ Expected input vars: ['CO2', 'SO2', 'CH4', 'BC', 'rsdt']\n",
            "✅ Expected output vars: ['tas', 'pr']\n",
            "Available SSPs in dataset: ['ssp126' 'ssp245' 'ssp370' 'ssp585']\n",
            "Available member_ids: [0 1 2]\n",
            "\n",
            "📦 Loading SSP: ssp370\n",
            "✅ Expected input vars: ['CO2', 'SO2', 'CH4', 'BC', 'rsdt']\n",
            "✅ Expected output vars: ['tas', 'pr']\n",
            "Available SSPs in dataset: ['ssp126' 'ssp245' 'ssp370' 'ssp585']\n",
            "Available member_ids: [0 1 2]\n",
            "\n",
            "📦 Loading SSP: ssp585\n",
            "✅ Expected input vars: ['CO2', 'SO2', 'CH4', 'BC', 'rsdt']\n",
            "✅ Expected output vars: ['tas', 'pr']\n",
            "✔ Output mean: [280.59796    2.519279]\n",
            "✔ Output std: [20.98827    2.9703383]\n",
            "Mean out: [[[[280.59796 ]]\n",
            "\n",
            "  [[  2.519279]]]]\n",
            "Std out: [[[[20.98827  ]]\n",
            "\n",
            "  [[ 2.9703383]]]]\n",
            "\n",
            "📦 Loading SSP: ssp245\n",
            "✅ Expected input vars: ['CO2', 'SO2', 'CH4', 'BC', 'rsdt']\n",
            "✅ Expected output vars: ['tas', 'pr']\n",
            "Test output shape: (1021, 2, 48, 72)\n",
            "Test output mean (raw): 0.0\n",
            "Test output std (raw): 0.0\n",
            "Before to_sequences, train_input_norm shape: (2703, 5, 48, 72)\n",
            "val_output_norm shape BEFORE slicing: (360, 2, 48, 72)\n",
            "Creating dataset with 2703 samples...\n",
            "Final dataset input shape: torch.Size([2703, 1, 5, 48, 72])\n",
            "Final dataset output shape: torch.Size([2703, 2, 48, 72])\n",
            "Creating dataset with 360 samples...\n",
            "Final dataset input shape: torch.Size([360, 1, 5, 48, 72])\n",
            "Final dataset output shape: torch.Size([360, 2, 48, 72])\n",
            "Creating dataset with 360 samples...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Final dataset input shape: torch.Size([360, 1, 5, 48, 72])\n",
            "Final dataset output shape: torch.Size([360, 2, 48, 72])\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "619062247e9d42c4b2fac32436c28d5e",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Testing: |          | 0/? [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[TEST] tas: RMSE=290.4444, Time-Mean RMSE=290.4043, Time-Stddev MAE=3.4719\n",
            "[TEST] pr: RMSE=4.3466, Time-Mean RMSE=3.8492, Time-Stddev MAE=1.4213\n",
            "tas mean prediction: 281.20148\n",
            "tas std prediction: 20.6472\n",
            "tas mean true: 0.0\n",
            "tas std true: 0.0\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\">        Test metric        </span>┃<span style=\"font-weight: bold\">       DataLoader 0        </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
              "│<span style=\"color: #008080; text-decoration-color: #008080\">       test/pr/rmse        </span>│<span style=\"color: #800080; text-decoration-color: #800080\">     4.346645355224609     </span>│\n",
              "│<span style=\"color: #008080; text-decoration-color: #008080\">  test/pr/time_mean_rmse   </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    3.8492283821105957     </span>│\n",
              "│<span style=\"color: #008080; text-decoration-color: #008080\">   test/pr/time_std_mae    </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    1.4213370084762573     </span>│\n",
              "│<span style=\"color: #008080; text-decoration-color: #008080\">       test/tas/rmse       </span>│<span style=\"color: #800080; text-decoration-color: #800080\">     290.4443664550781     </span>│\n",
              "│<span style=\"color: #008080; text-decoration-color: #008080\">  test/tas/time_mean_rmse  </span>│<span style=\"color: #800080; text-decoration-color: #800080\">     290.4043273925781     </span>│\n",
              "│<span style=\"color: #008080; text-decoration-color: #008080\">   test/tas/time_std_mae   </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    3.4718635082244873     </span>│\n",
              "└───────────────────────────┴───────────────────────────┘\n",
              "</pre>\n"
            ],
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1m       Test metric       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      DataLoader 0       \u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
              "│\u001b[36m \u001b[0m\u001b[36m      test/pr/rmse       \u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m    4.346645355224609    \u001b[0m\u001b[35m \u001b[0m│\n",
              "│\u001b[36m \u001b[0m\u001b[36m test/pr/time_mean_rmse  \u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   3.8492283821105957    \u001b[0m\u001b[35m \u001b[0m│\n",
              "│\u001b[36m \u001b[0m\u001b[36m  test/pr/time_std_mae   \u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   1.4213370084762573    \u001b[0m\u001b[35m \u001b[0m│\n",
              "│\u001b[36m \u001b[0m\u001b[36m      test/tas/rmse      \u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m    290.4443664550781    \u001b[0m\u001b[35m \u001b[0m│\n",
              "│\u001b[36m \u001b[0m\u001b[36m test/tas/time_mean_rmse \u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m    290.4043273925781    \u001b[0m\u001b[35m \u001b[0m│\n",
              "│\u001b[36m \u001b[0m\u001b[36m  test/tas/time_std_mae  \u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   3.4718635082244873    \u001b[0m\u001b[35m \u001b[0m│\n",
              "└───────────────────────────┴───────────────────────────┘\n"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "[{'test/tas/rmse': 290.4443664550781,\n",
              "  'test/tas/time_mean_rmse': 290.4043273925781,\n",
              "  'test/tas/time_std_mae': 3.4718635082244873,\n",
              "  'test/pr/rmse': 4.346645355224609,\n",
              "  'test/pr/time_mean_rmse': 3.8492283821105957,\n",
              "  'test/pr/time_std_mae': 1.4213370084762573}]"
            ]
          },
          "execution_count": 36,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "trainer.test(lightning_module, datamodule=datamodule)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GR1pXPyuWSAB",
        "outputId": "17dbb87c-1f29-47e3-a6e0-8df41b483fea"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Available SSPs: ['ssp126' 'ssp245' 'ssp370' 'ssp585']\n",
            "Available member_ids: [0 1 2]\n",
            "tas ssp245 shape: (1021, 3, 48, 72)\n",
            "tas ssp245 stats:\n",
            " - min: 0.0\n",
            " - max: 0.0\n",
            " - mean: 0.0\n"
          ]
        }
      ],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WRJlMoLCWSAB",
        "outputId": "1fbf693f-f62a-4254-ac6a-1e18f029c15c"
      },
      "outputs": [
        {
          "ename": "AttributeError",
          "evalue": "'ClimateEmulationModule' object has no attribute 'generate_kaggle_submission'",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "Cell \u001b[0;32mIn[19], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m preds \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mload(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtest_preds.npy\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m----> 2\u001b[0m \u001b[43mlightning_module\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgenerate_kaggle_submission\u001b[49m(preds)\n",
            "File \u001b[0;32m~/.local/lib/python3.11/site-packages/torch/nn/modules/module.py:1940\u001b[0m, in \u001b[0;36mModule.__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   1938\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m name \u001b[38;5;129;01min\u001b[39;00m modules:\n\u001b[1;32m   1939\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m modules[name]\n\u001b[0;32m-> 1940\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m(\n\u001b[1;32m   1941\u001b[0m     \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mtype\u001b[39m(\u001b[38;5;28mself\u001b[39m)\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m object has no attribute \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mname\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1942\u001b[0m )\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'ClimateEmulationModule' object has no attribute 'generate_kaggle_submission'"
          ]
        }
      ],
      "source": [
        "preds = np.load(\"test_preds.npy\")\n",
        "lightning_module.generate_kaggle_submission(preds)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ilII-8SzWSAB",
        "outputId": "acda55db-33a4-4f79-bdfd-6c71e979ba99"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "✅ Submission file saved as 'kaggle_submission.csv'\n"
          ]
        }
      ],
      "source": [
        "preds = np.load(\"test_preds.npy\")  # shape: (355, 2, 48, 72)\n",
        "\n",
        "# Define time, lat, lon, and variable names\n",
        "time_steps = preds.shape[0]\n",
        "lat_size = preds.shape[2]\n",
        "lon_size = preds.shape[3]\n",
        "lat = np.arange(lat_size)\n",
        "lon = np.arange(lon_size)\n",
        "variables = [\"tas\", \"pr\"]\n",
        "\n",
        "# Create long-form records\n",
        "records = []\n",
        "for t in range(time_steps):\n",
        "    for v_idx, var in enumerate(variables):\n",
        "        for i in range(lat_size):\n",
        "            for j in range(lon_size):\n",
        "                records.append([t, lat[i], lon[j], var, preds[t, v_idx, i, j]])\n",
        "\n",
        "# Create DataFrame\n",
        "df = pd.DataFrame(records, columns=[\"time\", \"lat\", \"lon\", \"variable\", \"value\"])\n",
        "\n",
        "# Save as CSV (or .parquet if you prefer)\n",
        "df.to_csv(\"kaggle_submission.csv\", index=False)\n",
        "print(\"✅ Submission file saved as 'kaggle_submission.csv'\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iHcrFMJfWSAB",
        "outputId": "30a97f6c-471f-4097-95d8-e4850de563e8"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(2488320, 5)"
            ]
          },
          "execution_count": 43,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RERPfd8hWSAB"
      },
      "source": [
        "### Plotting Utils\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DE-folTDWSAB"
      },
      "outputs": [],
      "source": [
        "def plot_comparison(true_xr, pred_xr, title, cmap='viridis', diff_cmap='RdBu_r', metric=None):\n",
        "    fig, axs = plt.subplots(1, 3, figsize=(18, 6))\n",
        "\n",
        "    vmin = min(true_xr.min().item(), pred_xr.min().item())\n",
        "    vmax = max(true_xr.max().item(), pred_xr.max().item())\n",
        "\n",
        "    # Ground truth\n",
        "    true_xr.plot(ax=axs[0], cmap=cmap, vmin=vmin, vmax=vmax, add_colorbar=True)\n",
        "    axs[0].set_title(f\"{title} (Ground Truth)\")\n",
        "\n",
        "    # Prediction\n",
        "    pred_xr.plot(ax=axs[1], cmap=cmap, vmin=vmin, vmax=vmax, add_colorbar=True)\n",
        "    axs[1].set_title(f\"{title} (Prediction)\")\n",
        "\n",
        "    # Difference\n",
        "    diff = pred_xr - true_xr\n",
        "    abs_max = np.max(np.abs(diff))\n",
        "    diff.plot(ax=axs[2], cmap=diff_cmap, vmin=-abs_max, vmax=abs_max, add_colorbar=True)\n",
        "    axs[2].set_title(f\"{title} (Difference) {f'- {metric:.4f}' if metric else ''}\")\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eCmsjwJTWSAC"
      },
      "source": [
        "### 🖼️ Visualizing Validation Predictions\n",
        "\n",
        "This cell loads saved validation predictions and compares them to the ground truth using spatial plots. These visualizations help you qualitatively assess your model's performance.\n",
        "\n",
        "For each output variable (`tas`, `pr`), we visualize:\n",
        "\n",
        "- **📈 Time-Mean Map**: The 10-year average spatial pattern for both prediction and ground truth. Helps identify long-term biases or spatial shifts.\n",
        "- **📊 Time-Stddev Map**: Shows the standard deviation across time for each grid cell — useful for assessing how well the model captures **temporal variability** at each location.\n",
        "- **🕓 Random Timestep Sample**: Visual comparison of prediction vs ground truth for a single month. Useful for spotting fine-grained anomalies or errors in specific months.\n",
        "\n",
        "> These plots provide intuition beyond metrics and are useful for debugging spatial or temporal model failures.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KktL4c61WSAC",
        "outputId": "2732447f-068f-42fb-919b-2b5f446c3627"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1800x600 with 6 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1800x600 with 6 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1800x600 with 6 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABuYAAAJOCAYAAABLD7FSAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAAD1kElEQVR4nOzdeZgdVZn48beq7tK31ySdnayy75sogkJwBAyCjswoiiCr4wgqqzKADAGBCP508NERVwKyuYOMCoLK4gygrIqACJINsm+dXu9SdX5/xG65qfcNXcmt7tud7+d5+oG8ffrUqVOnTr1VdeuW55xzAgAAAAAAAAAAACBV/nA3AAAAAAAAAAAAANgecGMOAAAAAAAAAAAAGALcmAMAAAAAAAAAAACGADfmAAAAAAAAAAAAgCHAjTkAAAAAAAAAAABgCHBjDgAAAAAAAAAAABgC3JgDAAAAAAAAAAAAhgA35gAAAAAAAAAAAIAhwI05AAAAAAAAAAAAYAhwYw51qVwuy6RJk+Tggw82y0RRJDNmzJB99tln0PU++OCD4nmePPjgg2aZWbNmied5b/hz0003ybx588TzvCSrlrpFixYNtHHevHlqmdNPP32gzEhw+umny7vf/e5YfOXKlXLJJZfIfvvtJ62trZLL5WTatGly/PHHy9133y1hGA5Da2tjzpw5MmfOHPP3/WPvjX62VMdgff3rX5ebbropFu/fn3784x+/YR0nn3yy/PM///M2twUAUDvkW1tve8i3Xr+OnueJ7/vS3t4uxxxzjDz66KND0qZTTz1VZs2aVRXbUp9bli1bJvPmzZNnnnkm9ruhGF9//etfJZfLyVNPPZXqcgAAtUWutPW2x1wpm81Ke3u7HHTQQXLeeefJc889F6vD2vZf/epXZaeddpJcLiee58mGDRtERORzn/uczJgxQzKZjIwZMybFtasf5XJZdtxxR7n++uuHuylAqjLD3QBAk81m5eSTT5YvfelL8vzzz8see+wRK/PrX/9ali5dKhdccEFNl33nnXdKsVgc+Pd3vvMd+e53vyv33nuvtLW1DcR33HFHKRaL6g2jetDS0iI33XST/Od//qf4/j/uwXd1dcmPfvQjaW1tlY0bNw5jCwfn6aeflptvvll+//vfV8Ufe+wxee973yvOOfnEJz4hBx98sDQ3N8uSJUvkf/7nf+T444+Xb37zm3LGGWcMU8vTdeaZZ1aNveXLl8vxxx8vn/rUp+TEE08ciLe2tm7zsr7+9a/L+PHj5dRTT93qOubNmye77bab/Pa3v5V3vvOd29wmAMC2I9/adqM93xKRgdwiDEN57rnn5IorrpAjjjhCHn30Udl///2HvK2PPvqoTJs2LdHfLFu2TK644gqZNWuW7LffflW/2zynSsMuu+wiH/nIR+S8886Thx56KNVlAQBqh1xp221PuVIURbJhwwZ5+umn5cYbb5SvfvWrMn/+fPnMZz4zUPaAAw6QRx99tGosPfPMM/LpT39azjzzTDnllFMkk8lIS0uL/OxnP5Orr75aLr30Upk7d67k8/khWdfhls1m5T//8z/lvPPOk5NPPlna29uHu0lAOhwwzHp6etT4888/70TEXXDBBervTzjhBJfL5dyaNWsGvawHHnjAiYh74IEHBv03l19+uRMRt3r16kH/zXBauHChExF35plnOhFx9913X9Xvv/Od77hCoeBOOukkNxKmgA9+8IPu4IMProqtX7/eTZo0yc2ePdstW7ZM/bs//vGP7re//e0W6+7p6XFRFNWsrbV0+OGHu8MPP3zQ5fu3+xe/+MUtliuVSq5cLidqy5577qm2pX9/+tGPfjSoeo499lh35JFHJlo2AKA2yLdqa3vIt6zc4je/+c3AultqlWOdcsopbubMmdtcz+OPP+5ExC1YsGCb69paTzzxhBMR93//93/D1gYAgI1cqba251zJuU3j6d3vfrcTEffLX/5yi3XfeuutTkTc73//+6r4VVdd5UTErVy5cttX4O+6u7trVleaisWiGzdunLv66quHuylAavgqS2yz/kfmn376aTn++OOltbVV2tra5KSTTpLVq1dXlZ01a5Yce+yx8tOf/lT2339/aWhokCuuuEKtd/fdd5e3ve1tcsstt0ilUqn63YYNG+RnP/uZvO9975P29nZ54okn5EMf+pDMmjVLCoWCzJo1Sz784Q/L4sWLU1tvEf2rb/rX8ec//7nsv//+UigUZPfdd5ef//znIiJy0003ye677y5NTU3ylre8RZ544olYvU888YS8973vlXHjxklDQ4Psv//+8sMf/jBR23bddVc55JBD5MYbb6yK33jjjXL88cdXfcLq9X7wgx/I2972NmlqapLm5mY5+uij5emnn461bzD9fdNNN4nnefLAAw/IJz7xCRk/fry0t7fL8ccfL8uWLXvDdVi5cqXceeedcvLJJ1fFv/3tb8vKlSvluuuukylTpqh/u88++8gRRxwRa8t9990np59+ukyYMEEaGxulWCxKFEVy3XXXyW677Sb5fF4mTpwoH/3oR+XVV1+tqnPWrFnqU2Obf+1k/1cT3HHHHXLppZfK1KlTpbW1Vd71rnfJiy++WPW3zjm57rrrZObMmdLQ0CAHHHCA3HPPPW/YN4PR345bbrlFLrjgAtlhhx0kn8/Lyy+/bH7VRX8/LVq0aGCdn3vuOXnooYcGvp5h86+UKpfLb7ieIpu+zvLXv/61/O1vf6vJ+gHA9oR8i3xrqPMtS//XefW3Y0s51mDXtb+eXXfdVfL5vOy+++7yve99T12+9pVYr732mvzbv/2bTJ8+XXK5nEydOlX+9V//VVauXCkPPvigHHTQQSIictppp8W+VksbX4PNDefMmSN77bWXPP744/KOd7xDGhsb5U1vepN84QtfkCiKqsoeeOCBsvvuu8s3vvGNQfQyACApciVypXrJlURECoWCfPe735VsNitf/OIXB+Kbf5XlnDlz5KSTThIRkbe+9a3ied7AV3l/7nOfExGRSZMmxfKfwfTPqaeeKs3NzfLss8/KUUcdJS0tLfJP//RPIiJSKpXkqquuGsh1JkyYIKeddpq5r9x7771ywAEHSKFQkN122y22PUW2nI/127hxo1x44YUye/ZsyeVyssMOO8i5554r3d3dVXXlcjk54YQT5Fvf+pY45wbd78BIwo051Mz73/9+2WmnneTHP/6xzJs3T+666y45+uijpVwuV5V76qmn5DOf+Yx8+tOflnvvvVf+5V/+xazzjDPOkFWrVskvfvGLqvjtt98ufX19A19TuGjRItl1113l+uuvl1/96ldy7bXXyvLly+Wggw6SNWvW1H5l38Af//hHufjii+Wiiy6Sn/70p9LW1ibHH3+8XH755fKd73xHrrnmGrntttuko6NDjj32WOnt7R342wceeEAOPfRQ2bBhg3zjG9+Qn/3sZ7LffvvJCSecoL7na0vOOOMMueuuu2T9+vUiIvLiiy/KI488Yn694zXXXCMf/vCHZY899pAf/vCHcsstt0hnZ6e84x3vkOeff36gXNL+PvPMMyWbzcrtt98u1113nTz44IMDiceW3HfffVIul6tusImI3H///RIEgRxzzDFJukNENn0neDablVtuuUV+/OMfSzablU984hNy0UUXyZFHHil33323fP7zn5d7771XDjnkkG0aP5dccoksXrxYvvOd78i3vvUteemll+S4446revfdFVdcMbDsu+66Sz7xiU/Ixz72MfXG1ta6+OKLZcmSJfKNb3xD/ud//kcmTpw46L+988475U1vepPsv//+8uijj8qjjz4qd955Z+L1FNmUcDrn5Je//GVN1gsAtkfkW/9AvlWt1vmW5eWXXxYRkQkTJlTFtRxrsOt60003yWmnnSa77767/OQnP5HPfe5z8vnPf15++9vfvmF7XnvtNTnooIPkzjvvlPPPP1/uueceuf7666WtrU3Wr18vBxxwgCxYsEBENr2npT+fOfPMM806k+SGK1askI985CNy0kknyd133y1z586Viy++WG699dZYvXPmzJF77rmHC0wAkCJypX8gV6o2VLlSv6lTp8qBBx4ojzzySOymbr+vf/3rAzfgFixYII8++qhcdtllcueddw70z7333luVuwy2f0Q23YB773vfK+985zvlZz/7mVxxxRUSRZG8733vky984Qty4oknyi9+8Qv5whe+IPfff7/MmTOnahyIbBpHF1xwgZx33nnys5/9TPbZZx8544wz5OGHHx4o80b5mIhIT0+PHH744XLzzTfLpz/9abnnnnvkoosukptuumngVTWvN2fOHFm8eLH8+c9/TtTvwIgxrM/rYVTof5z+vPPOq4rfdtttTkTcrbfeOhCbOXOmC4LAvfjii4Oqu7Oz0zU3N7v3vve9VfEDDzzQTZ8+3YVhqP5dpVJxXV1drqmpyX3lK18ZiNf66wL6f/d6M2fOdIVCwb366qsDsWeeecaJiJsyZUrVY+N33XWXExF39913D8R22203t//++8e+bvDYY491U6ZMMde53+sfpe/vv6997WvOOec+85nPuNmzZ7soitzZZ59d1fYlS5a4TCbjPvWpT1XV19nZ6SZPnuw++MEPmsu0+nvBggVORNxZZ51VVf66665zIuKWL1++xXX5xCc+4QqFQuyrkHbbbTc3efLkWPkwDF25XB74eX1f9bflox/9aNXfvPDCC2obf//73zsRcZdccslAbObMme6UU06JLXfzr53sH2fHHHNMVbkf/vCHTkTco48+6pzb9JWcDQ0N7v3v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Z+XQQw/dpifC3vnOd4qIyK233lr1iaPHH39cXnjhBbn00ksHYrNmzZI//elPVX//17/+VV588cWtShQOPvhgaWhokNtuu62qzx955BFZvHhxqjew+uv+05/+VLXe//M//xMra33qO6lKpSJLly6NffUVAGDwyLe2HflWNSvf2laDXdddd91VpkyZInfccYecf/75AxeQFi9eLI888ohMnTp1i8uZO3eu3HLLLfLiiy8OXCTc3GA/ES+SLDdM6pVXXhHf9812AgC2HbnStiNXqrY1uVJvb6+ceeaZUqlU5LOf/WzN2jLY/tmSY489Vr7//e9LGIby1re+tSbtGkw+duyxx8o111wj7e3t5g3c13vllVdERGSPPfaoSRuBesONOdTMT3/6U8lkMnLkkUfKc889J5dddpnsu+++8sEPfnCb6/7oRz8ql1xyiXzxi1+UMWPGVH1ip7W1VQ477DD54he/KOPHj5dZs2bJQw89JN/97ndlzJgx27zsofbNb35T5s6dK0cffbSceuqpssMOO8i6devkhRdekKeeekp+9KMfJa7zpJNOGviKR8usWbPkyiuvlEsvvVReeeUVefe73y1jx46VlStXyh/+8AdpamqSK664Ykj7e86cOeKck9///vdy1FFHDcTHjBkjd911lxx33HGy7777yic+8Qk5+OCDpbm5WdauXSsPP/ywrFixYlDvJdl1113l3/7t3+SrX/2q+L4vc+fOlUWLFslll10m06dPl/POO2+g7MknnywnnXSSnHXWWfIv//IvsnjxYrnuuutkwoQJW7V+Y8eOlQsvvFCuuuoqOfPMM+UDH/iALF26VObNm1fTr7LUHHPMMTJu3Dg544wz5Morr5RMJiM33XSTLF26NFZ27733lu9///vygx/8QN70pjdJQ0OD7L333omX+ac//Ul6enrkiCOOqMUqAMB2iXyrNsi3/sHKt7bVYNfV9335/Oc/L2eeeaa8//3vl4997GOyYcOGQedDV155pdxzzz1y2GGHySWXXCJ77723bNiwQe699145//zzZbfddpMdd9xRCoWC3HbbbbL77rtLc3OzTJ06Vb3plyQ3TOqxxx6T/fbbT8aOHbvVdQAAtoxcqTbIlf7hjXKlJUuWyGOPPSZRFElHR4c8/fTTcuONN8rixYvlS1/60rDkV1vyoQ99SG677TY55phj5JxzzpG3vOUtks1m5dVXX5UHHnhA3ve+98n73//+RO0aTD527rnnyk9+8hM57LDD5LzzzpN99tlHoiiSJUuWyH333ScXXHBB1Y3Cxx57TIIgkMMOO2yr+gqod9yYQ8389Kc/lXnz5skNN9wgnufJcccdJ9dff735lYJJTJw4UY499li588475cQTT4x9t/Ptt98u55xzjnz2s5+VSqUihx56qNx///3ynve8Z5uXPdSOOOII+cMf/iBXX321nHvuubJ+/Xppb2+XPfbYoyaJ5JZcfPHFsscee8hXvvIVueOOO6RYLMrkyZPloIMOkn//938fKDdU/X3ooYfKrFmz5Gc/+1kskTn44IPlz3/+s3zlK1+Ru+66S770pS9JqVSSCRMmyIEHHijf/va35cMf/vCglnPDDTfIjjvuKN/97nflv//7v6WtrU3e/e53y/z586u+7uLEE0+UZcuWyTe+8Q1ZsGCB7LXXXnLDDTe8YdKzJVdeeaU0NTXJ17/+dbnllltkt912k2984xvy//7f/9vqOgejtbVV7r33Xjn33HPlpJNOkjFjxsiZZ54pc+fOlTPPPLOq7BVXXCHLly+Xj33sY9LZ2SkzZ858w/e9aO666y4ZP358TZNSANjekG/VBvnWP2wp39pWg13XM844Q0RErr32Wjn++ONl1qxZcskll8hDDz0kDz744BaXscMOO8gf/vAHufzyy+ULX/iCrF27ViZMmCBvf/vbB97n0tjYKDfeeKNcccUVctRRR0m5XJbLL79c5s2bp9Y52Nwwia6uLvnNb34jn//857fq7wEAg0OuVBvkSv/wRrnSV7/6VfnqV78qQRBIa2urvOlNb5LjjjtOPvaxj6XytNdg+8cSBIHcfffd8pWvfEVuueUWmT9/vmQyGZk2bZocfvjhW/VB7MHkY01NTfK73/1OvvCFL8i3vvUtWbhwoRQKBZkxY4a8613vin1r1F133SXHHHPMiLyxDQyG55xzw90IjGzz5s2TK664QlavXs33/qLmvvSlL8nVV18tr732mhQKheFuDrZSGIay0047yYknnihXX331cDcHAEYc8i2kiXwrfd/97nflnHPOkaVLl/LEHACkgFwJaSJXGlp/+9vfZOedd5Zf/epXcuSRRw53c4BU+MPdAADYkrPPPlva2trkv//7v4e7KdgGt956q3R1dclnPvOZ4W4K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nZqFxg+S7okuwbmfl/A8nNSsNZJso25jjZhCwmNGq9ZA5I7/WNWp7RGYTW//9bGkc0EndOKSfdJFWm201q81BnyrfFTT42E87grleCxP7tRufJUlAABo5JyIi1L6HNuJzVe+8hVZuXKllEolWb16tfzrv/5rizsNAABwjFLNnY4tfyJ3AgAA3cyFkbgwTOnT/X+wz405AADQ1W6//Xa56qqr5LrrrpPt27fLL/3SL8m73/1u2bFjR6ebBgAA0HXInQAAALobN+YAAEADF7lUP0l94QtfkA9/+MPykY98RM444wz54he/KMuWLZObb745hd4DAAAkk3bulDR/IncCAADdzrlQXJTSx3X/O+a4MQcAALpWtVqVhx9+WNavX98QX79+vdx///0dahUAAEB3IncCAADofrlONwAAAHQZF4lISt/H7Y7UOzIy0hAuFotSLBZjxfft2ydhGMqiRYsa4osWLZI9e/ak00YAAIAk0sydpupvLn8idwIAAL3ARaGIl86TbS7iiTkAAICYZcuWyeDg4NRn8+bNM5b3PK/h/865WAwAACDLkuRP5E4AAADdiyfmAABAAxc5cV7yd8E1Vbc7Uu/OnTtlYGBgKq49LSciMjQ0JEEQxP7Ce+/evbG/BAcAAOiENHMnkWT5E7kTAADoBTwxBwAA0GYDAwMNH+vGXKFQkNWrV8tdd93VEL/rrrtk3bp17WgqAABAV2gmfyJ3AgAA6H48MQcAABq14R1zSVx99dXy67/+67JmzRpZu3at3HrrrbJjxw654oorUmggAABAQm16x1yzyJ0AAEC3m+1PzHFjbprJr4iou1qHW4LZp3e/799zaT9827vrpie49L52p1PcMdz8absE633ymOTatK3qUhNJaVF1SX58/cAHPiD79++XG2+8UXbv3i2rVq2Sb33rW7J8+fIUWoikjil3MseyMt8bZdu1PwAA4jyXND/X5ne9Ds8FehVWXKm77qpHfiUDudNU/QmQO3W3yXF56NCh2M8C4z2AoTGWrT3RGo5h1PxA5Z2EndErOW6CodQxrWhjr2yPNPXCXOB3fxPNNlrrNzDK+1b5yMgVwnjcU2KHDh0WkTaP+bCWXvqk9LHbeI4ZpsFTTz0lp556aqebAQBAzM6dO2Xp0qWp1T8xMSErV66MvZOk1YaHh+Xpp5+WUqmU6nLQHs8995wsW7as080AACAmK7mTCPlTlpA7AQC6Vdq5kwjXniZxY26al19+WebPny87duyQwcHBTjcnVSMjI7Js2bLYC6SziL5mz2zppwh9zaokfXXOyaFDh2TJkiXi++k+oToxMSHVajXVZRQKha5NjJBcFEXyxBNPyJlnnpn5fZc5Kpvoa/bMln6K0FdL1nInEfKnLJlNuZMI81QWzZZ+itDXrJotfe3W3EmEa08ifJVlzOTAGxwczPSO+WqTL46eDehr9syWforQ16xqtq/t+mORUqnU1YkLuo/v+3LSSSeJyOzZd2dLP0Xoa1bNlr7Oln6K0FcNuRO61WzMnUToaxbNln6K0Nesmi197bbcSYT8SUQk/dufAAAAAAAAAAAAALgxBwAAAAAAAAAAALQDN+amKRaLcv3110uxWOx0U1JHX7NptvR1tvRThL5m1WzqK7Jvtozn2dJPEfqaVbOlr7OlnyL0FehVs2k809fsmS39FKGvWTVb+jpb+tmrPOec63QjAAAAAAAAAAAAgKzjiTkAAAAAAAAAAACgDbgxBwAAAAAAAAAAALQBN+YAAAAAAAAAAACANuDG3DRf+cpXZOXKlVIqlWT16tXyr//6r51u0nHZtGmTeJ7X8BkeHp76uXNONm3aJEuWLJFyuSznn3++PPbYYx1scfO+973vyXvf+15ZsmSJeJ4nf/d3f9fw82b6VqlU5KMf/agMDQ1JX1+fXHTRRfLcc8+1sRfNOVpfL7vssth2Pu+88xrK9EJfN2/eLOeee67MnTtXTjzxRHn/+98vTzzxREOZrGzXZvqale168803y1lnnSUDAwMyMDAga9eulX/6p3+a+nlWtunR+pmV7QlMl7XcSSS7+RO503/IypxM7kTu1MvbVIT8CbNX1vKnrOZOIuRPr5aVOXm25E/kTuROvbxNZwNuzL3K7bffLldddZVcd911sn37dvmlX/olefe73y07duzodNOOyy/8wi/I7t27pz6PPvro1M/+5//8n/KFL3xBvvzlL8tDDz0kw8PD8p/+03+SQ4cOdbDFzRkdHZWzzz5bvvzlL6s/b6ZvV111ldxxxx1y2223yX333SeHDx+WCy+8UMIwbFc3mnK0voqIbNiwoWE7f+tb32r4eS/09d5775Urr7xSHnjgAbnrrrukXq/L+vXrZXR0dKpMVrZrM30VycZ2Xbp0qXz2s5+Vbdu2ybZt2+Ttb3+7vO9975tKgrKyTY/WT5FsbE/g1bKaO4lkM38id2qUhTmZ3IncqZe3qQj5E2anrOZPWcydRMifpsvCnDxb8idyJ3KnXt6ms4LDlDe96U3uiiuuaIidfvrp7uMf/3iHWnT8rr/+enf22WerP4uiyA0PD7vPfvazU7GJiQk3ODjobrnllja1sDVExN1xxx1T/2+mby+//LLL5/Putttumyrz/PPPO9/33be//e22tT2p6X11zrlLL73Uve997zN/p1f7unfvXici7t5773XOZXu7Tu+rc9ndrs45N3/+fPdnf/Znmd6mzv1HP53L9vbE7JXF3Mm52ZE/kTtlc04md8rmdnVu9uROzpE/IfuymD/NhtzJOfKnrM7JsyV/InfK1vZ8NXKn3sQTc6+oVqvy8MMPy/r16xvi69evl/vvv79DrWqNn/3sZ7JkyRJZuXKlXHLJJfLUU0+JiMjTTz8te/bsaehzsViUt73tbT3f52b69vDDD0utVmsos2TJElm1alVP9v+ee+6RE088UV772tfK5ZdfLnv37p36Wa/29eDBgyIismDBAhHJ9nad3tdJWduuYRjKbbfdJqOjo7J27drMbtPp/ZyUte2J2S3LuZPI7MufsjofzySLczK5U/a262zJnUTInzA7ZDl/mm25k0i2j7OWLM7JsyV/InfK1vYUIXfqdblON6Bb7Nu3T8IwlEWLFjXEFy1aJHv27OlQq47fm9/8ZvnzP/9zee1rXysvvPCCfOpTn5J169bJY489NtUvrc/PPvtsJ5rbMs30bc+ePVIoFGT+/PmxMr22zd/97nfLxRdfLMuXL5enn35a/uAP/kDe/va3y8MPPyzFYrEn++qck6uvvlre8pa3yKpVq0Qku9tV66tItrbro48+KmvXrpWJiQnp7++XO+64Q84888ypg35WtqnVT5FsbU9AJLu5k8jszJ+yeoy1ZHFOJnfK1nadLbmTCPkTZpes5k+zMXcSye5x1pLFOXm25E/kTtnanuRO2cCNuWk8z2v4v3MuFusl7373u6f+/frXv17Wrl0rp556qnz961+fevFj1vr8asfSt17s/wc+8IGpf69atUrWrFkjy5cvl3/8x3+UX/7lXzZ/r5v7unHjRvnRj34k9913X+xnWduuVl+ztF1f97rXySOPPCIvv/yy/O3f/q1ceumlcu+99079PCvb1OrnmWeemantCbxaFvOI2Zw/ZWU+PposzsnkTtnarrMldxIhf8LslLU8YjbnTiLZmpNnksU5ebbkT+RO2dqe5E7ZwFdZvmJoaEiCIIjdGd67d2/sjnov6+vrk9e//vXys5/9TIaHh0VEMtnnZvo2PDws1WpVXnrpJbNMr1q8eLEsX75cfvazn4lI7/X1ox/9qNx5551y9913y9KlS6fiWdyuVl81vbxdC4WCnHbaabJmzRrZvHmznH322fK//tf/ytw2tfqp6eXtCYjMntxJZHbkT1mbj5Pq9TmZ3EnXy9t1tuROIuRPmF1mS/40G3InkWweZ5Po9Tl5tuRP5E7Z2p4i5E5ZwY25VxQKBVm9erXcddddDfG77rpL1q1b16FWtV6lUpF///d/l8WLF8vKlStleHi4oc/ValXuvffenu9zM31bvXq15PP5hjK7d++WH//4xz3f//3798vOnTtl8eLFItI7fXXOycaNG+Ub3/iGfPe735WVK1c2/DxL2/VofdX06nbVOOekUqlkaptqJvupydL2xOw0W3InkdmRP2V9Pj6aXp2TyZ1m1qvbVTNbcicR8idk22zJn2ZD7iSSrePssejVOXm25E/kTuROItnappnjMOW2225z+XzeffWrX3WPP/64u+qqq1xfX5975plnOt20Y3bNNde4e+65xz311FPugQcecBdeeKGbO3fuVJ8++9nPusHBQfeNb3zDPfroo+5Xf/VX3eLFi93IyEiHW350hw4dctu3b3fbt293IuK+8IUvuO3bt7tnn33WOddc36644gq3dOlS953vfMf927/9m3v729/uzj77bFev1zvVLdVMfT106JC75ppr3P333++efvppd/fdd7u1a9e6k046qef6+lu/9VtucHDQ3XPPPW737t1Tn7GxsakyWdmuR+trlrbrtdde6773ve+5p59+2v3oRz9y/+N//A/n+77bunWrcy4723SmfmZpewKvlsXcybns5k/kTuROvbxdyZ2ylzs5R/6E2SmL+VNWcyfnyJ/In3p3u5I7kTv18jadDbgxN83//t//2y1fvtwVCgX3xje+0d17772dbtJx+cAHPuAWL17s8vm8W7JkifvlX/5l99hjj039PIoid/3117vh4WFXLBbdW9/6Vvfoo492sMXNu/vuu52IxD6XXnqpc665vo2Pj7uNGze6BQsWuHK57C688EK3Y8eODvRmZjP1dWxszK1fv96dcMIJLp/Pu5NPPtldeumlsX70Ql+1PoqI27Jly1SZrGzXo/U1S9v1v/7X/zo1r55wwgnuHe94x1Ry5Fx2tulM/czS9gSmy1ru5Fx28ydyJ3KnXt6u5E7Zy52cI3/C7JW1/CmruZNz5E/kT727XcmdyJ16eZvOBp5zzh3783YAAAAAAAAAAAAAmsE75gAAAAAAAAAAAIA24MYcAAAAAAAAAAAA0AbcmAMAAAAAAAAAAADagBtzAAAAAAAAAAAAQBtwYw4AAAAAAAAAAABoA27MAQAAAAAAAAAAAG3AjTkAAAAAAAAAAACgDbgxBwAAAAAAAAAAALQBN+YAAAAAAAAAAACANuDGHAAAAAAAAAAAANAG3JgDAAAAAAAAAAAA2oAbcwBa5sUXX5Th4WH5zGc+MxX7wQ9+IIVCQbZu3drBlgEAAHQn8icAAIDmkTsByALPOec63QgA2fGtb31L3v/+98v9998vp59+urzhDW+Q97znPfLFL36x000DAADoSuRPAAAAzSN3AtDruDEHoOWuvPJK+c53viPnnnuu/PCHP5SHHnpISqVSp5sFAADQtcifAAAAmkfuBKCXcWMOQMuNj4/LqlWrZOfOnbJt2zY566yzOt0kAACArkb+BAAA0DxyJwC9jHfMAWi5p556Snbt2iVRFMmzzz7b6eYAAAB0PfInAACA5pE7AehlPDEHoKWq1aq86U1vknPOOUdOP/10+cIXviCPPvqoLFq0qNNNAwAA6ErkTwAAAM0jdwLQ67gxB6Clfvd3f1f+5m/+Rn74wx9Kf3+/XHDBBTJ37lz55je/2emmAQAAdCXyJwAAgOaROwHodXyVJYCWueeee+SLX/yi/MVf/IUMDAyI7/vyF3/xF3LffffJzTff3OnmAQAAdB3yJwAAgOaROwHIAp6YAwAAAAAAAAAAANqAJ+YAAAAAAAAAAACANuDGHAAAAAAAAAAAANAG3JgDAAAAAAAAAAAA2oAbcwAAAAAAAAAAAEAbcGMOAAAAAAAAAAAAaANuzAEAAAAAAAAAAABtwI05AAAAAAAAAAAAoA24MQcAAAAAAAAAAAC0ATfmAAAAAAAAAAAAgDbgxhwAAAAAAAAAAADQBtyYAwAAAAAAAAAAANqAG3MAAAAAAAAAAABAG/z/x1pRWUrfmt0AAAAASUVORK5CYII=",
            "text/plain": [
              "<Figure size 1800x600 with 6 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1800x600 with 6 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1800x600 with 6 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Load validation predictions\n",
        "# make sure to have run the validation loop at least once\n",
        "val_preds = np.load(\"val_preds.npy\")\n",
        "val_trues = np.load(\"val_trues.npy\")\n",
        "\n",
        "lat, lon = datamodule.get_coords()\n",
        "output_vars = datamodule.output_vars\n",
        "time = np.arange(val_preds.shape[0])\n",
        "\n",
        "for i, var in enumerate(output_vars):\n",
        "    pred_xr = xr.DataArray(val_preds[:, i], dims=[\"time\", \"y\", \"x\"], coords={\"time\": time, \"y\": lat, \"x\": lon})\n",
        "    true_xr = xr.DataArray(val_trues[:, i], dims=[\"time\", \"y\", \"x\"], coords={\"time\": time, \"y\": lat, \"x\": lon})\n",
        "\n",
        "    # --- Time Mean ---\n",
        "    plot_comparison(true_xr.mean(\"time\"), pred_xr.mean(\"time\"), f\"{var} Val Time-Mean\")\n",
        "\n",
        "    # --- Time Stddev ---\n",
        "    plot_comparison(true_xr.std(\"time\"), pred_xr.std(\"time\"), f\"{var} Val Time-Stddev\", cmap=\"plasma\")\n",
        "\n",
        "    # --- Random timestep ---\n",
        "    t_idx = np.random.randint(0, len(time))\n",
        "    plot_comparison(true_xr.isel(time=t_idx), pred_xr.isel(time=t_idx), f\"{var} Val Sample Timestep {t_idx}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bNvZAKKeWSAC"
      },
      "source": [
        "## 🧪 Final Notes\n",
        "\n",
        "This notebook is meant to serve as a **baseline template** — a starting point to help you get up and running quickly with the climate emulation challenge.\n",
        "\n",
        "You are **not** required to stick to this exact setup. In fact, we **encourage** you to:\n",
        "\n",
        "- 🔁 Build on top of the provided `DataModule`.\n",
        "- 🧠 Use your own model architectures or training pipelines that you’re more comfortable with\n",
        "- ⚗️ Experiment with ideas  \n",
        "- 🥇 Compete creatively to climb the Kaggle leaderboard  \n",
        "- 🙌 Most importantly: **have fun** and **learn as much as you can** along the way\n",
        "\n",
        "This challenge simulates a real-world scientific problem, and there’s no single \"correct\" approach — so be curious, experiment boldly, and make it your own!\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FgXG6Uz-WSAK"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wYBYHHN1WSAK"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kaggle": {
      "accelerator": "none",
      "dataSources": [],
      "isGpuEnabled": false,
      "isInternetEnabled": true,
      "language": "python",
      "sourceType": "notebook"
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.9"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
